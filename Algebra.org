#+TITLE: Algebra
#+AUTHOR: Vittorio Zaccaria
#+LEVEL: 3
#+OPTIONS: H:3
#+BEAMER_HEADER: \usepackage{tikz-cd}
#+BEAMER_HEADER: \usepackage{libertine-type1}
#+BEAMER_HEADER: \usepackage{biolinum-type1}
#+BEAMER_HEADER: \usepackage[libertine]{newtxmath}
#+BEAMER_HEADER: \usepackage{amssymb,amsmath}

#+BEAMER_HEADER: \usepackage[T1]{fontenc}
#+BEAMER_HEADER: \usepackage{inconsolata}
#+BEAMER_HEADER: \newcommand{\kk}{\mathbb{k}}
#+BEAMER_HEADER: \newcommand{\KK}{\mathbb{K}}
#+BEAMER_HEADER: \newcommand{\CC}{\mathbb{C}}
#+BEAMER_HEADER: \newcommand{\BB}{\mathbb{B}}
#+BEAMER_HEADER: \newcommand{\NN}{\mathbb{N}}
#+BEAMER_HEADER: \newcommand{\RR}{\mathbb{R}}
#+BEAMER_HEADER: \newcommand{\np}[2]{\langle #1, #2 \rangle}
#+BEAMER_HEADER: \newcommand{\ang}[1]{\langle #1 \rangle}
#+BEAMER_HEADER: \newcommand{\ds}{d^*}
#+BEAMER_HEADER: \newcommand{\es}{e^*}
#+BEAMER_HEADER: \newcommand{\fs}{f^*}
#+BEAMER_HEADER: \newcommand{\ladjof}{\dashv}
#+BEAMER_HEADER: \newcommand{\radjof}{\vdash}
#+STARTUP: indent 

* Algebraic structures with one operator
** Other structures
*** Magma
    A magma is set $M$ equipped with a single binary operation,
    $(*): M \times M \rightarrow M$ that satisfies:

   - *closure*: $a \in M, b \in M \rightarrow a * b \in M$

** Monoids
*** Monoid

   A monoid $(M,*)$ is a *semigroup* with a unit element ($1 \in M$) where the $*$
   operation satisfies:

   - *identity*: $m * 1 = m, \forall m \in M$.

*** Generator set (Monoid)
    A subset $S$ of $M$ is said to be a generator if all elements $m \in M$
    can be obtained by some kind of *fold* of the elements $s \in S$.

    \[
      \forall m \in M, \exists s_1, \ldots, s_n \in S \textrm{~~s.t.~~} m = s_1 * \cdots * s_n
    \]

*** Free generator set (Monoid)

    A subset $S$ of $M$ is said to be a generator if all elements $m \in M$
    can be obtained by a *unique fold* of the elements $s \in S$.

    \[
      \forall m \in M, \exists s_1, \ldots, s_n \in S \textrm{~~s.t.~~} m = s_1 * \cdots * s_n
    \]

    Not all generator sets are free. For example, $\{1\}$ is a generator for
    $\mathbb{Z}_n$ but it is not free, in the sense that each element of
    $\mathbb{Z}_n$ can be defined by multiple sequences of 1.

*** Free monoid

    A free monoid is a monoid *with a free generator*.

    - Example: $(\mathbb{N}, +)$ is the *free monoid generated by 1*.

*** Abelian monoid
    A monoid $(M,*)$ where $$\forall m_1,m_2 \in M, m_1 * m_2 = m_2 * m_1$$

*** Monoid homomorphisms
    Given two monoids $(X,\star)$ and $(Y, *)$, a homomorphism $$f: (X,\star)
    \rightarrow (Y,*)$$ is a function $f: X \rightarrow Y$ such that:

    \[
      f(1_X) = 1_Y \textrm{~~and~~} f(m \star n) = f(m) * f(n)
    \]

** Groups
*** Group

   A group $G$ is a monoid where for all elements $a$, the (*) operation satisfies:

   - *closure*: $a \in G, b \in G \rightarrow a * b \in G$
   - *identity element*: $a * 1_G = 1_G * a = a$
   - *invertibility*: $a * a^{-1} = 1$.
   - *associativity*: $a * (b * c) = (a * b) * c$

   In a group, every element has its own inverse.

*** Subgroup
   $H$ is a subgroup of $G$ if:

   - $H \subseteq G$
   - It is closed under (*).

   The *trivial subgroup* of any group is the subgroup ${e}$ consisting of just the identity element.

*** Normal subgroup
  - $H$ is a normal subgroup of $G$ iff $$\forall h \in H \wedge g \in G, ghg^{-1} \in H$$

  - It is a subgroup invariant to the action of the inner automorphisms $I(G)$,
    the set of inner automorphisms on $G$.

*** Kernel of a group homomorphism
    The *kernel* $\textrm{ker}(f)$ of a group homomorphism $f: (G,\star)
    \rightarrow (H,*)$ is a set $K$ such that

    - $K \subseteq G$
    - $\forall k \in K, f(k) = 1_{*}$

    It is a /normal subgroup of $G$/, because $$\forall g \in G.f(gkg^{-1})=f(g)f(g^{-1})=1_*$$

*** Range of a group homomorphism
    The *range* $\textrm{range}(f)$ of a homomorphism  $f: (G,\star)
    \rightarrow (H,*)$ is a set $R$ such that

    - $R \subseteq H$
    - $\forall r \in R, \exists g \in G \textrm{~s.t.~} r = f(g)$

*** Coset
- Given a subgroup $(H, \star) \subseteq (G, \star)$, we define the *left coset*
  of $H$ as the orbit of an element $g$ relative to $H$ active by left
  multiplication:
          
                 $$H_g = \{g \star h : h \in H\}$$


- Orbits are disjoint subset of $G$: $\bigcup_g H_g = G$

*** Subgroup of an abelian group
    Every subgroup of an abelian group is normal.

*** Coset multiplication

    Coset multiplication operation: $$Hg_1 * Hg_2 = H(g_1 \star g_2),~~g_1,g_2 \in G$$

*** Factor/quotient group

    - If $H$ is a normal subgroup of $G$, coset multiplication is a group
      operation of a particular group: the *factor (or quotient) group*.

    - The factor group $G/H$ is a group where elements are the
      cosets of $G$ by $H$ and group operation is cosets multiplication.

*** Construct a quotient group $Z/6Z$.


    - $(G, +) = Z$
    - $(H, +) \subseteq (G,+) = 6Z$ is the subgroup of all multiples of 6 in $Z$
    - *elements* of the quotient group are all the unique cosets $$H_g = \{ 6Z + g, g \in Z \}$$
      (their elements are infinite, but there are only 6 of them, $H_1=H_7=\ldots$).
    - the *operation* among cosets $$Hg_1 + Hg_2 = H_{g_1 + g_2}$$  respects
      the quotient group properties.

    This quotient group is also called *the cyclic group $Z_6$*.

*** Fundamental homomorphism theorem

    - Given a quotient group $G/H$, there is a homomorphism $\mu: G \rightarrow
      G/H$. This homomoprhism is called 'natural' and corresponds to assigning
      to each $g$ its coset $H_g$.

    - Given any homomorphism $\phi: G \rightarrow Q$, the following sequence is
      exact: $$ 1 \rightarrow N \rightarrow^{\iota} G \rightarrow^{\phi} [Q \cong G/N]
      \rightarrow 1 $$ where $N$ is normal.

*** Semigroup

    A semigroup $S$ is a group *without inverse and identity element*.

   - *closure*: $a \in G, b \in G \rightarrow a * b \in G$
   - *associativity*: $(a * b) * c = a * (b * c),~~a,b,c \in G$.

*** Group identity and inverse properties

    Both the identity and the inverse of every element are *unique*.

*** Endomorphism ring of an abelian group

    Given a group $(G,+,0_G)$, we can define a set
    \[
      End(G) = \{ f: G \rightarrow G | f(a + b) = f(a) + f(b) \}
    \]

    The set $End(G)$ can be made into a *ring* with the following
    operations/properties

    - sum: $(f ++ g)(x) = f(x) + g(x)$
    - sum unit: $f = x \mapsto 0$
    - sum inverse: $f^{-1}x = (f x)^{-1}$
    - multiplication: $(f \circ g)(x) = f(g(x))$
    - multiplication unit: $f = x \mapsto x$

*** Order of a group element
    In a group, the least integer $n$ such that $a^n=1_{*}$, then that element
    has order $n$.

*** Cyclic group
    If $G$ has an element $a$ and all its elements are powers of $a$, then $G$ is cyclic:
    $$G = \{ a^n : n \in Z \}$$

    $a$ is called generator and the group order is the order of $a$.

*** Symmetric group
    The symmetric group $S_n$ is the group of all permutations (symmetries) of $\{1, . . . , n\}$

*** Group action

     - A group action $\phi$ of group $G$ on a set $X$ is a function
       $$*: G \times X \rightarrow X$$ satisfying the following properties:

       - identity: $e * x = x$
       - compatibility: $(gh) * x = g * (h * x)$

     - An action $g * x$ is the same as a group homomorphism $G \rightarrow \textrm{Aut}(X)$

*** Commutator subgroup

   - A commutator subgroup $[G,G]$ is an abelian group that can be built from a
     finite group $G$.

   - It is composed of the set of elements $$[G,G] = \{ xyx^{-1}y^{-1}, x~y \in G \}$$

   - It is a normal subgroup

*** Commutator subgroup of $S_n$

    The commutator subgroup of $S_n$ is the alternating group $A_n$. It
    is the set of all even permutations in $S_n$. Even = even number of
    transpositions in which it can be written.

*** Subgroup index

  - The index of a subgroup H in G is defined as the number of cosets of H in G
    (it is the number of partitions).

  - It is denoted as $[G:H]$.



*** Stabilizer of a group element's action
    - Given a group $G$, a set $S$ and an action $\curvearrowright: G \times S \rightarrow
      S$, a *stabilizer* of $s \in S$ is an element $g_s \in G$ such that $$ {g_s} \curvearrowright s = s$$
    - For each $s \in S$ one can define a group $Stab(s) = \{ g_s \}$ which is a
      sub-group of $G$ (it is called /isotropy group/).

*** Orbit in a set $S$ relative to a group $H$
- Given an action $\curvearrowright: H \times S \rightarrow S$ the *group orbit*
  of $s \in S$ is a subset of $S$ defined as $$H_s = \{h \curvearrowright s:
  \forall h \in H \}$$

- Orbits are disjoint subset of $S$: $\bigcup_s H_s = S$ and define an $H-$ 
  equivalence relation over $S$.

*** Invariance relative to a group $H$

- An element $t \in S$ is /invariant/ relative to $H$ if the orbit associated to
  it is a singleton: $$H_t = \{ t \}$$

- A subset $\{ t \} \subset S$ is invariant relative to $H$ if $H_t \subset \{ t
  \} \forall t$


# - $Orb(s)$ forms a group which is isomorphic to $G/Stab(s)$.

*** Orbit-stabilizer theorem
    $$|Orb(s)| = [ G : Stab(s) ]$$

*** Centralizer of a group element
    The centralizer of an element $a$ of a group $G$ is the set of elements of
    $G$ that commute with $a$: $$C_G(a) = \{ g \vert ga = ag \}$$

*** Group conjugacy classes
    - Two elements $x, y$ of a group $G$ are conjugate-wise equivalent if $$\exists g. y=gxg^{-1}$$
    - The conjugacy class of an element $x \in G$ is the set of elements:
      $$Cl(x) = \{ gxg^{-1}: g \in G \}$$

    - The class number of G is the number of distinct (nonequivalent) conjugacy classes
*** Free group 
The free group $F_S$ with free generating set $S$ can be constructed as follows.
- Consider $S$ is a set of symbols and suppose for every $s \in S$ there is a
  corresponding $s^{-1}$. 
- Let $T = S \bigcup S^{-1}$, and define a word in $S$ to
  be the free monoid generated by $T$.
- The free group $F_S$ is the group of all reduced ($\forall x. xx^{-1} \rightarrow
  \cdot$) words in $S$ with *concatenation* as group operation.
This construction is a *functor*.
*** Free group universal property
- Any function from a set $S$ to a group $G$ can be factored through a unique
  $\phi: F_S \rightarrow G$ wher $F_S$ is the free group associated with $S$.
*** Group automorphism

- It is a morphism $\alpha: G \rightarrow G$ that respects multiplication:
  $$\alpha(g_1g_2) = \alpha(g_1)\alpha(g_2)$$

- The set $A(G)=\{ \alpha \}$ is a subgroup of $P(G)$, i.e., the group of
  permutations of $G$ elements.

*** Inner automorphisms
- For each $g \in G$, one can define an inner automorphism $i_g = \gamma \mapsto 
  g\gamma g^{-1}$

- These automorphisms are permutations that form a group $I(G) \subset A(G)$.

*** Center of a group
- The center of a group $G$ is $$C(G) = \{ g: \gamma g = g \gamma, \forall \gamma\}$$

- It is the kernel of the homomorphism $G \rightarrow I(G)$: $$g \mapsto (\gamma
  \mapsto g \gamma g^{-1})$$ because all the elements in the center are mapped to 
  an identity.

- So, by the FHT, $I(G) = G/C(G)$

** Group representations
*** Linear group representation

    - A *linear group representation* of $G$ is a group homomorphism
      $$\rho : G \rightarrow Aut(V)$$

    - It represents the elements of $G$ as *symmetries of the vector space* $V$.

    - By choosing a basis in $V$, $Aut(V) \simeq GL(V)$.

*** Properties of a linear group representation

    - $\rho_g \rho_h = \rho_{gh}$
    - $\rho_1 = Id$
    - $(\rho_g)^{-1} = \rho_{g^{-1}}$
    - $\rho_g(xv + yw) = x\rho_gv + y\rho_gw$

*** Permutation representation
     - The *permutation representation* is associated with a symmetric group $G =
       S_n$ and acts on a $V_k = k^n$.

     - Assume $v \in V_k = \sum_j a_j e_j$ with e_j basis. A permutation
       representation $\rho_{\pi}: S_n \rightarrow GL(k^n)$ is such that $\rho_s
       v = \sum a_j e_{s(j)}$.

     - Practically speaking, gives a permutation matrix for each $g \in G$.

*** Character of a representation

    - The *character* of a representation $\rho$ is the trace of the corresponding
      matrix: $\chi_{\rho_g} = Tr(\rho_g)$.

    - Frobenius showed there is finitely many irreducible representations of G
      and that they are completely determined by their characters.

    - The character is a central or class function, it depends only on the
      conjugacy class of $g$.

*** Properties of the character of a representation

    - $\chi_{\rho}(1) = dim(\rho)$
    - $\chi_{\rho \oplus \sigma} = \chi_{\rho} + \chi_{\sigma}$
    - $\chi_{\rho \otimes \sigma} = \chi_{\rho} * \chi_{\sigma}$
    - $\chi_{\rho^*}(g) = \chi_{\rho}(g^{-1})$

    If $k=C$, $\chi_{\rho}(g)=\bar{\chi}_{\rho}(g^{-1})$

*** Conjugacy classes and irreducible representations
    - The number of isomorphism classes of irreducible representations of G
      equals the number of conjugacy classes of G.
    - The size of these representations is given by the Maschke's sum of squares

*** Orthogonality relations
    Given the space of functions $F = \{ f: G \rightarrow k \}$, define the
    averaging operator $$(f_1,f_2) = \frac{1}{|G|}\sum_G f_1(g^{-1})f_2(g)$$

    - Assume $(\rho, V)$ and $(\sigma, W)$ be irreducible representations of a
      group. If they are not isomorphic then $(\chi_{\rho},\chi_{\sigma}) = 0$.
      If they are equivalent then $(\chi_{\rho},\chi_{\sigma}) = 1$

    - $dim(V^G) = (\chi_{\rho}, \chi_{triv})$
*** Sign representation
    Given any representation of the permutation group $\rho(S_n)$,
    $\textrm{det}(\rho(S_n))$ is the corresponding sign representation as well
    and it is either 1 or -1.

*** Faithful representation

    A *faithful* representation $\rho$ is an *injective* map, i.e., different $g$
    are represented by distinct $\rho(g)$.

*** Unitary representations

    - Assume $V$ is a space equipped with a hermitian dot product (on $C_2$)
      that measures the distance between vectors (i.e., an Hilbert space).

    - $(\rho,V)$ is unitary (or, a unitary operator) if it preserves the
      distance of vectors ($\langle\rho(g)v,\rho(g)w\rangle = \langle v,w
      \rangle$).

    - If the group is finite, then one can always build an unitary operator.


*** Trivial representation

    - A representation $\rho: G \rightarrow GL(E_k)$ is trivial if all $g \in G$
      map to an identity matrix.

*** Invariant representation
     A representation $\rho(g)$ is *invariant* if $\forall v \in V \rho(g)v \subseteq V$

*** Intertwining operator

  - An intertwining operator is a functor $\Phi_{ij}: E_i \rightarrow E_j$ that
    preserves representations: $$\Phi_{ij}(\rho_i(g)v)=\rho_j(g)\Phi_{ij}(v)$$

  - As such, it introduces a homomorphism between representations $$\rho_2
    = \Phi_{12} \rho_1$$ which comply with composition.

  - We can thus say that any group $G$ defines a *category of representations* and
    we can speak of its morphisms (intertwiner) as $Hom_G(\rho_1, \rho_2)$.

*** Morphisms of representations

- A morphism between vector spaces $F \rightarrow E$ can be a morphism of
  representations if it is an intertwiner.

- The inclusion morphism between vector spaces is an intertwiner if it is invariant.

*** Equivalence of representations

  $\rho_1, \rho_2$ are equivalent if there exists an intertwining operator $L$
  that has an inverse and such that $$L \circ \rho_1 = \rho_2 \circ L$$.

*** Subrepresentations
   Given a subspace $F \subseteq E$, if $$\forall f \in F, ~~\rho(G)(f) \in
     F$$ then $(\rho, F)$ is a *subrepresentation* of $(\rho, E)$.

   If a group has a subrepresentation $F \subseteq E$ then also $E/F$ is a
   representation.

*** Trivial subrepresentation

   - A trivial subrepresentation $E^G$ of $\rho$ is the set of $e \in E$ such that $\rho(g)e = e$.

   - Any non-zero vector in $E^G$ produces a one-dimensional representation.

*** Functoriality of representations

For any endo-functor $T$ in **Vect**, a representation $\rho$ of on a space $E$ can be used 
to derive a representation $\pi = T\rho$ on $TE$.

*** Irreducible representation

    An *irreducible* representation $(\rho,V)$ has as subrepresentations only
    $(\rho,0)$ and $(\rho,V)$

*** Maschke's theorem
    Given two representations of group $G$: $(\rho,V), (\rho, W), W \subset V$ we have
    $$|G| \nmid char(k) \leftrightarrow \exists W'. V = W \oplus W'$$

*** Maschke's sum of squares

    If $V = \bigoplus V_i$ and all $V_i$ are irreducible representations of $G$,
    then $$|G| = \sum_i dim(V_i)^2$$.

*** Full reducibility

    If $V = W_1 \oplus \ldots W_n$ and all $(\rho, W_i)$ are irreducible then
    $(\rho, V)$ is fully reducible.

*** Representations of Abelian groups

    - For an abelian group, it is possible to choose a basis to make $\rho(g)$ diagonal.

    - For G finite, matrices are going to be block diagonal.

*** One dimensional representation

  - A one-dimensional $k$ representation is built above a homomorphism $\chi: G
    \rightarrow k^{\times}$ and corresponds to a representation $\rho_k(g) =
    \chi(g)Id_{V}$ ($\chi(\cdot)$ is in fact a scalar).

  - The set $\hat{G}$ of one-dimensional representations of a group $G$ is an
    abelian group and it is isomorphic to $G/G'$ where $G'$ is the
    commutator subgroup.

*** Representations of external direct sums

   - An external direct sum $V \oplus V'$ is the set of pairs that can be built

   - $\rho_{\oplus}(g)(v,v') = (\rho(g)v, \rho'(g)v')$

   - Practically, if we concatenate $v,v'$ in a single vector, $\rho_{\oplus}$
     is a diagonal block matrix of $\rho, \rho'$.

*** Representations of dual spaces

    Given $(\rho,V)$, one can define a representation of its dual vector space
    $(\rho^*, V^*)$ such that $$\rho^*(g) \vec{f} = v \mapsto f (\rho^{-1}(g)
    \cdot v)$$.

*** Representation of quotient spaces

    Assume $\mu: E \rightarrow E/W$ the canonical map of $E$ into its quotient
    vector space $E/W$ and that $W$ is a subrepresentation. Then 

    - The inclusion map $W \rightarrow E$ is a morphism of representations
    - One can show that also $\mu$ is a morphism of representations


*** Kernel representations
    
    - Given a homomorphism $\mu$ between spaces $E_1 \rightarrow E_2$, the
      representation $E_1/Ker(\mu)$ is isomorphic to $Im(\mu)$

*** Representation of a tensor product space

    Given $(\rho, V)$ and $(\rho', V')$, one can define
    $$(\rho_{\otimes},V \otimes V') = \rho v \otimes \rho' v'$$

    If input repr. are one-dimensional, tensoring becomes multiplication.

*** Representation of $Hom$ spaces

    Given $Hom_C(V, V') = \{ f: V \rightarrow V' \}$ linear, one can define
    a representation from representations of $V$ and $V'$:

    $$\rho_{Hom} f = \rho' \circ f \circ \rho^{-1}$$

*** Representation of conjugate vector spaces
    Given $(\rho,V)$, $\rho$ is a representation of the
    conjugate vector space $\bar{V}$ as well.

    A conjugate representation $(\rho, \bar{V})$ is *equivalent* to $(\rho, V)$
    and to its dual representation $(\rho^*, V^*)$.

*** Regular representation of $G$

    A group algebra $K[G]$ is a vector space of elements $\phi$ that can be written as
    $$\phi: \phi(g_1)g_1 + \phi(g_2)g_2 + \ldots$$ i.e., $$K[G]=span\{g_1, g_2,
    \ldots \}$$ The regular representation $(\rho_{K}, K[G])$ is such that
    $$\rho_{K}(s)\phi = \rho_{K}(s) \phi(g_1)g_1 + \ldots = \phi(g_1)(s*g_1) +
    \ldots$$

*** Regular representation of $G$ through Cayley

    - By Caley, there is an isomorphism $\rho_C: G \rightarrow S_n$ for a group
      $G$ of order $n$ that is given by picking a permutation $\lambda x.gx$.

    - A regular representation is just the concatenation of a permutation
      representation and the cayley isomorphism: $$\rho = \rho_{\pi} \circ
      \rho_{C}$$ In practice, it associates a permutation to each $g \in G$.

    - For example, the regular representation of a cyclic group of order $n$
      ($\{1,x,x^2,\ldots, x^n\}$) associates to each element the power of a
      cyclic permutation matrix $P$.

*** Representation of function space over $G$

    A function space $F(G) = \{ \phi: G \rightarrow K \}$ can be seen as composed
    of members of the group algebra (similarly to the Z-transform): $$\phi:
    \phi(g_1)g_1 + \phi(g_2)g_2 + \ldots$$ i.e., $$K[G]=span\{g_1, g_2, \ldots
    \}$$ thus one can define a representation that is equivalent to the group
    algebra's one.

*** Schur's lemma
     - If $(\rho, V)$ and $(\rho', V)$ are irreducible representations and there
       is an intertwining operator $L$, *then* $$L \neq 0 \rightarrow L
       \textrm{~is an equivalence}$$ (no middle ground).
*** Schur's lemma - corollary for $L : V \rightarrow V$
     For irreducible representations ($\rho,V$) all intertwining operators $L: V
     \rightarrow V$ have the form $L=\lambda I$ where $\lambda$ is a scalar. In
     fact, $\lambda$ is the root of the characteristic polynomial (an
     eigenvalue) of $\phi$.
*** Schur's lemma - corollary for $L_1, L_2$ intertwining operators
     For irreducible representations ($\rho, V$) and ($\rho', V'$) all the intertwining
     operators have the form $L_1 = \lambda L_2$.
*** Irreducible representations of abelian groups
    - All irreducible representations $(\rho, V)$ of an abelian group are such that
      $dim(V)=1$ (by Schur's lemma), i.e., they are one dimensional.
    - To each $\rho(g)$ it corresponds a scalar $\lambda_g$, which is called *character*.
    - If $\rho$ is not irreducible, then there exists a basis such that
      $\rho(g)$ is diagonal.

*** Multiplicative group of roots of unity

Set of points whose angles are a rational multiples of $\pi$:
$$\mathbb{T} = \{ \forall kn. e^{2\pi i k/n}\}$$

*** Dual group
 - The dual group of $G$ (i.e., $\hat{G}$) is the set of all homomorphisms from
   $G$ into $T$, the multiplicative group of all roots of unity, i.e.:
   $$\hat{G} = Hom(G,\mathbb{T})$$
 - Functions in $\chi \in \hat{G}$ are called *characters* on the group (which are
   not, in general, the characters of the representation) and multiplication in
   $\hat{G}$ is the multiplication of characters.
 - Just as $K$ represents the functor $(-)^V$, $\mathbb{T}$ represents $(-)^G$
   and the set is just the dual group.

*** Dual group examples
| Name                     | Parameterized element     | Parameter range                                     |
|--------------------------+---------------------------+-----------------------------------------------------|
| $\hat{\mathbb{Z}}$       | $z \mapsto t^z$           | $\forall t \in \mathbb{T}$                          |
| $\widehat{\mathbb{Z}/n}$ | $z \mapsto \xi_n^{a*z}$   | $\forall a \in \{0 ... n-1\}, \xi_n = e^{2\pi i/n}$ |
| $\hat{\mathbb{R}}$       | $r \mapsto e^{i\theta r}$ | $\forall \theta \in \mathbb{R}$                     |

*** Group representations and modules
- A /representation/ is a group hom. $G \rightarrow Aut(V)$ (i.e.,
  they have inverse).
- It extends to hom. of rings $K[G] \rightarrow End(V)$, where $End(V)$ is the
  endomorphism ring.
- The latter is an $R[G]-module$ which means that $R[G]$ modules and 
  representations of groups are the same thing.
- Irreducible representations correspond to a simple module $R[G]-module$. 
*** Fourier transform of a group

- It derives from the Peter-weyl theorem that states that $C[G]
  \simeq \bigoplus_i GL(V_i)$.

- Given a function $f: G \rightarrow \mathbb{C}$ and a representation $\rho(g)$ of
  $G$ over $\mathbb{C}$, we define the transform as: $$\hat{f}(\rho) = \sum_{g\in
  G}f(g)\rho(g)$$

  Note that since $\rho$ is a matrix of dimension $d \times d$, also $\hat{f}$ is
  a matrix $d \times d$.
   
*** Inverse Fourier transform of a group
Given a transform $\hat{f}: GL(\mathbb{C}) \rightarrow \mathbb{C}$, the original
function can be derived from all its original representations: 
$$f(g) = \frac{1}{|G|}\sum_i d_i\textrm{Tr}(\rho_i(g^-1)\hat{f}(\rho_i))$$
where $d_i$ is the dimension of each representation

*** Convolution of two group functions and their Fourier transform

The convolution of two functions $f,g:G\rightarrow {\mathbb{C}}$: $$(f\ast
g)(a)=\sum _{{b\in G}}f(ab^{{-1}})g(b)$$ is such that $$\widehat {f\ast
g}(\rho )=\widehat {f}(\rho )\widehat {g}(\rho )$$

*** Fourier transform of Abelian groups
If $G$ is an abelian group:

- all $\rho_i$ are monodimensional and they correspond to the irreducible
  characters $\chi_i$ of the group.

- these characters form a group structure $\hat{G}$ (called the Pontryagin dual
  of $G$)

- the transform of a function over the group can be written as: 
  $$f(g)={\frac {1}{|G|}}\sum_{\chi_i}{\widehat {f}}(\chi_i)\chi_i (g)$$

  which means that $f$ can be constructed from its base characters $\chi_i$.

*** Fourier transform of the quotient group $\mathbb{Z}/n$

For $G=\mathbb{Z}/n$, we have $n$ irreducible representations that can be
"generated" $k\in Z$: $$\chi_k(z)=z \mapsto e^{k\frac{2i\pi}{n}z}$$

* Algebraic structures with two operators
** Semirings
*** Semiring (Rig)
    A semiring $R$ consists of a set $R$ such that:

    - $(R, +)$ is a commutative monoid with identity = 0 (note, *not a group*, it
      should not have an inverse).
    - $(R, *)$ is a monoid with identity = 1
    - multiplication distributes over addition
    - multiplication by 0 gives 0 (annihilates).

** Rings
*** Ring

    A ring $R$ consists of a set $R$ such that:

    - $(R, +)$ is a *commutative* *group* with identity=0 (note that it should have
      an inverse, so we can talk about *negative* values).
    - $(R, *)$ is a monoid with identity = 1 (Semigroup)
    - multiplication distributes over addition
    - multiplication by 0 gives 0 (annihilates).

*** Commutative ring

   A commutative ring $R$ is commutative if $(R, *)$ is commutative.

*** Ring divisor of zero
    - $a \neq 0$ is called divisor of zero if there is $b \neq 0$ such that $ab = 0$

    - Z,Q,R and C do not have divisors of zero. This means that, if the product
      of two numbers is zero, then one of them should be zero.

*** Ring cancellation property

    - A ring has cancellation property if and only if it doesn't have divisors
      of zero. Equationally: $$ ab = ac
      \rightarrow b = c $$

*** Integral domain
    - It is a commutative ring (with multiplication commutative) that has the
      cancellation property.

    - An integral domain with non-zero characteristic $p$ is such that $p$ is prime.

*** Integral domains and fields

    - Every field is an integral domain.

    - Every *finite* integral domain is a field, because you can find a
      multiplicative inverse for each element of the field (this depends on the
      fact that there are no zero divisors).

    - A *finite integral domain* is just a *finite field*

*** Quaternions

    - Quaternions are a subring of 2x2 matrices with unity.

    - Each quaternion $\alpha$ has a multiplicative inverse $(1/t)\bar{\alpha}$,
      where $\bar{\alpha}$ is its conjugate and $t$ is its norm.

*** Subring

    If $S \subseteq R$ ($R$ is a ring) and $S$ is closed under sum, difference
    and multiplication of $R$, then it is a subring of $R$.

*** Ideals
    A subring $I$ of $R$ if

    - it absorbs elements of $R$ by multiplication: $$\forall s \in I, \forall r
      \in R. sr \in I$$
    - it is closed under addition.

    For example, even integers (but not the odd) are an ideal of $Z$.



*** Principal ideal

    A /principal ideal/ can be generated by taking an element $s$ of a commutative
    ring $R$ and computing the set $$ \langle s \rangle = \{ s * r: r \in R \}$$

    It can be shown that it respects the ideal properties (closed under addition
    and difference and absorbs multiplication).

    Every ideal in $Z$ is principal, but there are cases where an ideal is not principal.

*** Maximal ideal
- $I$ is a maximal ideal of a ring $R$ if there are no other ideals contained
  between $I$ and $R$.

- Quotient rings $R/I$ of maximal ideals are fields (when $R$ is unital, i.e.,
  there exists a unit for all the elements in $R$).

*** Prime ideal 

A prime ideal $P$ of a ring $R$ is such that, if $a$ and $b$ are two elements of
$R$ such that their product $ab$ is an element of $P$, then $a$ is in $P$ or $b$
is in $P$.

For integers, a prime ideal is the set that contains all the multiples of a
given prime number,

*** Ring homomorphism

    If $R$ and $S$ are rings, a ring homomorphism $f: R \rightarrow S$ is a
    total function such that:

    - $f(a + b) = f(a) + f(b)$
    - $f(a * b) = f(a) * f(b)$
    - $f(1_R) = 1_S$

*** Kernel of a ring homomorphism
    The kernel of a ring homomorphism $f: R_0 \rightarrow R_1$ is a subring
    $$I_R = \{ k \in R | f(k) = 0$$ which is ideal, because $f(a*k) = f(a)*f(k)$
    so if $k \in R$ then also $a*k \in R$. 
*** Cosets of an ideal of a ring

    A coset of an ideal $I_a$, just as those of subgroups, is created with the
    addition operation as in group theory: $$I_a = \{ a + i | i \in I\} a \in
    R$$ We can define both addition and multiplication:

    - $I_a + I_b = I_{a + b}$
    - $I_a * I_b = I_{a * b}$

    An ideal of a ring is actually a *subring*. Given a ring R and a subring I,
    you can form the quotient ring R/I if and only if I is an ideal.

*** Ring center

    The center of a ring $R$ is the subring $Z(R)$ of the elements $z$ such that $$zy
    = yz$$ for all elements $y$ in R.

*** Quotient ring

    Given a ring $R$ and an ideal $I$, the set of cosets of $I$ is a ring and
    it is called the quotient ring $R/I$.

*** Division ring
    - A ring where every nonzero element a has a multiplicative inverse.
    - Also called *skew field*, they differ from fields because multiplication is
      not required to be commutative.
*** Integral system
    - An integral domain $A$ that is *ordered* and for which every subset $B \subseteq
      A$ has a *least element* (initial object)
    - The above property ensures that there are no elements $c$ such that $0<c<1$.
    - Every element is a multiple of 1.
*** Integral system - mathematical induction
    If the following condition hold for a subset $K$ of an ordered integral system:
    - $1 \in K$
    - $k \in K \Rightarrow (k+1) \in K$
    then $K$ is all the integers. Proof by contradiction (see Pinter).

*** Polynomial
    - Take a ring $Z$ and add a new symbol $\pi$. Which other numbers should be
      present to make it a ring? It turns out that all the numbers of the form
      $$a_n \pi^n + \dots + a_1 \pi + a_0$$ should be present.
    - The ring created is the polynomial ring $\mathbb{Z}[x]$.

*** Ring of a polynomials over a field: ideals 
    Every ideal of a polynomial ring $\mathbb{F}$ is *principal*, i.e., ideals are
    always of the form $$\langle s(x) \rangle = \{ s(x) * f(x): f(x) \in \mathbb{F}(x) \}$$

    Any ideal $J$ is generated by its member $s(x)$ of the lowest degree.

*** Polynomial associates 
    Two polynomial $a(x), b(x) \in F[x]$ are associates if there exists an
    element $c \in F$ such that $a(x) = c \times b(x)$. It follows that they
    have a unique monic greatest common divisor polynomial.

*** Irreducible polynomials 
    A polynomial is *reducible* if it is expressible as the product of two other
    polys. It is *irreducible* otherwise. 
    
    For example $x^2+1$ is irreducible over $\mathbb{R}$ but reducible in
    $\mathbb{C}$.

*** Unique factorization domain

    Every polynomial $a(x)$ (with coefficients in $F$) of positive degree can be
    written *uniquely* as: $$a(x) = k p_1(x) \ldots p_n(x)$$ where $p_j(x)$ is a
    monic irreducible polynomial.

    We say that $F[x]$ is a *unique factorization domain*.

*** Algebraic element and minimal polynomial
- Given an extension $F[x]$, $a$ is called an algebraic element over $F$ if:
  $$\exists g(x). g(a) = 0$$ where $g(x)$ has coefficients in $F$.

- The lowest degree polynomial $g(x)$ of such form is called /minimal polynomial/ of $a$.

- Fields that do not allow algebraic elements over them are called /algebraically closed/.

*** Fundamental theorem of algebra
    - Every nonconstant polynomial with complex coefficients has a complex root.
    - If the coefficients are in $\mathbb{R}$ and $a+bi$ is a root, then also $a-bi$ is a root.

*** Semisimple ring
A ring is semisimple if (as its left or right module) is semisimple.
** Fields

*** Field

    A field a set with two operations:

    - $(F, +)$ is a commutative group
    - $(F, *)$ is a commutative group

*** Field characteristic

    A field has characteristic $n$ if $1_{*}$ summed with it self $n$ times gives
    $0_{+}$.

    The following relation is found to hold: $$ n > 0 \leftrightarrow
    \textrm{prime}(n)$$


*** Algebraically closed field
    An algebraically closed field $F$ contains a root for every non-constant
    polynomial in $F[x]$, the ring of polynomials in the variable $x$ with
    coefficients in $F$.

*** Field extensions 

    - Assume $\pi(x) \in F[x]$ irreducible. Can I build *a field extension* $F[c]$
      such that $\pi(x) \in F[c][x]$ is reducible? What structure does it pose to
      $F[c]$ and all its polynomials $p_i(c)$?
    - Assume $\sigma_c: F[c][x] \rightarrow F[c]$ substitutes $c$ into all occurrences of $x$ and
      $\pi(x)$ to 0.
    - Then
      - $\pi(c)=0 \in F[c]$ 
      - All other $p_i(c)$ can be written as remainders with respect to the
        division with $\pi(c)$. Their degree will be always less than $\pi(x)$.
    - Another way to see this is that the smallest field that contains $F$ and
      $c$ is isomorphic to the quotient ring $F[x]/<\pi(x)>$
      
*** Degree of a field extension
- An extension $F[c]$ is a vector space that contains $F$ and combines linearly
  its elements with $c$.

- If the dimension of $F[c]$ is $n$, we say that the *degree of $F[c]$ over $F$
  is $n$*, i.e., $$[F(c) : F]=n$$

*** Field extension $Z[x]/(x^2+x+1)$
    The polynomial $x^2 + x + 1$ does not have any root in $Z_2$. To
    build the field $Z_2[c]$, first identify the elements, i.e., $(0,1,c)$ and
    $(c+1)$ to make it closed under addition. When you build the
    multiplication table, remember to elide any addend of the type $c^2+c+1$.
*** Field extensions as vector space
    - An extension $F(c)$ can be seen as a vector space of elements of the form $$\sum^n_i f_i c^{i-1}$$
    - $n$ is the degree of the minimum polynomial of $c$ over $F$
    - if $c$ is the root of $x^2+1 \in R(x)$ then
      $c+1 \notin R$ but $c^2 + 1 \in R$ so n = 2.
    - $n$ is called the *extension degree* over $F$: $$ [ F(c) : F ] = n $$
*** Multiple field extensions as vector space
    - An extension $F(c_1, c_2)$ can be seen as a vector space of elements of
      the form $$\sum^{n_1}_i \sum^{n_2}_j f_{i,j} c_1^{i-1}c_2^{j-1}$$
    - Adjoining several $c_k$ brings to a overall extension degree $n =\Pi_k n_k$.
*** Root field

Given a polynomial $a(x)$ with roots $c_1 \ldots c_n$, the field extension
$F(c_1 \ldots c_n)$ is its *root field*.

*** Field isomorphisms
:PROPERTIES:
:BEAMER_opt: fragile
:END:
There exists an isomorphism $h$ between field extensions over roots $a,b$ of the
same irreducible polynomial $p(x) \in F(x)$:

#+BEGIN_EXPORT latex
\begin{tikzcd}
F \arrow[r, hook] \arrow[rd, hook] & F(a) \arrow[d] \\
 & F(b) \arrow[u, "h"]
\end{tikzcd}
#+END_EXPORT

- If $h$ does not remap values in $F$ but only the roots we say that /$h$ fixes $F$/.
- It can be shown that $F(a)$ and $F(b)$ must be the same field extension $K$
  thus there is a single root field for every irreducible polynomial --- if it
  contains $a$ it should contain also $b$.

*** Galois group

- A root field automorphism is an isomorphism over the same field which fixes $F$:
   $$h_{p(x)}: F(c) \rightarrow F(c)$$

- Each $h_{p(x)}$ permutes only the roots.

- The number of $h_{p(x)}$ is the degree $[F(c) : F]$

- They are permutations and they form a group (the *Galois* group) $$Gal(F(c) : F)$$
- not all permutations can be considered because only a few determine root field
  automorphisms.

*** Galois correspondence
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
F \arrow[r, hook] & {F[p_1]} \arrow[r, hook] & {F[p_1,p_2]} \\
\{id\} \arrow[r, hook] & {Gal(F[p_1] : F)} \arrow[r, hook] & {Gal(F[p_1,p_2] : F)}
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- There is a one-to-one correspondence between the subgroups of $Gal(F(c):F)$
  and the intermediate fixed fields between $F$ and $F[c]$, a.k.a, *Galois
  correspondence* ($p_1$ and $p_2$ are roots of two different polynomials).

- The number of elements of $H$ is $[F:I]$.

*** Galois correspondence example
:PROPERTIES:
:BEAMER_opt: fragile
:END:

- Consider $Q(i,a)$ where $a$ is the root of 2. 

- $Gal(Q(i,a) : Q) = \{ \epsilon=id, \alpha=(\sigma_i id_a), \beta=(id_i \sigma_a), \gamma=(\sigma_i
  \sigma_a) \}$ using transpositions to represent permutations.

- Then we have the following Galois correspondence:

  #+BEGIN_EXPORT latex
  \tiny
  \begin{tikzcd}
  & {\{\epsilon,\alpha,\beta,\gamma\}} &  &  & {Q(i,a)} &  \\
  {\{\epsilon,\alpha\}} \arrow[ru] & {\{\epsilon,\beta\}} \arrow[u] & {\{\epsilon,\gamma\}} \arrow[lu] & Q(a) \arrow[ru] & Q(i) \arrow[u] & Q(ia) \arrow[lu] \\
  & \{\epsilon\} \arrow[lu] \arrow[u] \arrow[ru] &  &  & Q \arrow[lu] \arrow[u] \arrow[u] \arrow[ru] & 
  \end{tikzcd}
  #+END_EXPORT


*** Normal subgroup of a Galois group.
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
F \arrow[r, hook] & {F[p_1]} \arrow[r, hook] & {F[p_1,p_2]} \\
\{id\} \arrow[r, hook] & {Gal(F[p_1] : F)} \arrow[r, hook] \arrow[l, "\mu_1", bend left] & {Gal(F[p_1,p_2] : F)} \arrow[l, "\mu_{12}", bend left]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- Given a field $F$, its field extensions $F[p_1],F[p_1,p_2]$ might be ordered according to
  inclusion. Their Galois group are automatically endowed with a homomorphism
  $\mu$ corresponding to a restriction of $h \in Gal(F[p_1,p_2]:F)$ into $Gal(F[p_1]:F)$.

- This homomorphism has a kernel $K = Gal(F[p_1,p_2]:F[p_1])$, so $Gal(F[p_1]:F) \cong Gal(F[p_1,p_2],F)/Gal(F[p_1,p_2],F[p_1])$.

* Algebras of vector spaces and modules
** Vector spaces
*** Vector space

    A pair $(V,K)$ where

    - $(K,(+,0),(\cdot,1))$ is a field
    - $(V,+,e)$ is an abelian group under addition

    Moreover, the following operation should be total (scalar multiplication)
    \[
    *: K \times V \rightarrow V
    \]

*** Direct sum

    The direct sum of two vector spaces is a linear combination (span) of their basis.

    $$V_1=span_k([0,1]), V_2=span_k([1,0]), V_1 \oplus V_2 = span_k([0,1],[1,0])$$

*** Normed vector spaces

    A *normed* vector space $V$ is endowed with a map $V \rightarrow R$.

*** Inner product spaces

    An *inner product* space $V$ is endowed with an operation $V \times V \rightarrow R$.

    Hermitian products are one of the possible operations

*** Conjugate vector spaces

    Given a vector space on complex numbers $V_C$ then also $\bar{V}_C$, where
     scalar multiplication is $\bar{z}*v$ for $z \in C$, is a vector space.

*** Dual Space

    - Given a vector space $V$, one can define its dual space as the space of
      linear mappings over it, i.e., $V^* = \{f: V \rightarrow k \}$.

    - $V^*=span(f_1^*, \ldots, f_n^*)$ where $$f_i^*(\sum_j c_j e_j)=c_i$$
      and $V = span(e_1, \ldots, e_n)$.

    - Important property of *duality*: $(V^*)^* \cong V$

    - Also called *linear functionals* from $V$ to $k$.

*** Functor between spaces and dual spaces
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{center}
\begin{tikzcd}
V \arrow[d, "f"] \arrow[r, "K^{(-)}"] & K^V \\
W \arrow[r] & K^W \arrow[u, "f^*"]
\end{tikzcd}
\end{center}
#+END_EXPORT

- It is a contravariant functor represented by $\KK$ and maps a linear $f: V
  \rightarrow W$ to its dual $f^*: W^* \rightarrow V^*$.
- The following identity holds:
  $$f^*(w^*) = w^* \circ f$$
- With the notation of natural pairing $\np{f^*(w^*)}{v} = \np{w^*}{f(v)}$

*** Dual spaces natural pairing


    - Given $v \in V_k$ and $v^* \in V^*$, there is a natural pairing $\np{v^*}{v}$,
      i.e., $v^*(v) \in k$. 

    - The *natural pairing* is a bi-linear map (in both $v$ and $v^*$).
      
*** Affine space
    - A tuple $(A, V_k, (+): V_k \times A \rightarrow A)$ defines an /affine space/
      $A$ if $(+)$ complies with the group action properties.
    - Alternatively, it can be defined as $(A, V_k, (-): A \times A \rightarrow V_k)$ where
      $(-)$ complies with Weyl's axioms

*** Quotient space
    Given a vector space $V$ and a subspace $W$, the quotient space $V/W$ is the set of
    cosets $W_v = \{ v + w | w \in W \}$.  Fixed a $v$, the coset represents the elements $y$
    for which $\exists w \in W, x - y = w$ which is an equivalence class.

*** Free vector space

- Given a field $k$ and a set $S$, a free vector space $k[S]$ is generated by
  all the formal sums of the form: $$\sum_{s \in S} k_s *s$$.

- It is a vector space with a basis for each element of $S$.

*** Tensor product spaces

    Given two vector spaces $(V,V')$, I can define their tensor product $W =V
    \otimes V'$ by

    - creating monomials (concatenations) of their bases $e_i \otimes e'_j$ as
      a new basis for $W$

    - expressing the product $v \otimes v' = \sum_{c_{ij}}c_{ij} e_i \otimes e'_j$ such
      that the properties of a bilinear product hold.

*** Tensor product spaces (formal quotients of free vector spaces)

    Given two vector spaces $(V,V')$, I can define their tensor product $W =V
    \otimes V'$ by

    - Taking the free vector space $F = (V \times V') = span \{(u,v) | u \in U,
      v \in V\}$ (all elements become a basis!).

    - $V \otimes V' = F(V \times V') / I$ where $I$ is an ideal generated that
      makes $(a+b)\otimes c = a \otimes c + b \otimes c$ (and other constraints..).
      

*** Universal property of tensor products 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
V \times W \arrow[r, "\phi"] \arrow[rd, "h"] & V \otimes W \arrow[d, "\tilde{h}"] \\
 & Z
\end{tikzcd}
#+END_EXPORT
    - Recall a bilinear map as a function that acts linearly and separately on each of its arguments.

    - All functions $\phi: V \times W \rightarrow V \otimes W$ that are
      bi-linear are isomorphic, so $\phi$ is called the universal bilinear map.

    - Any other bi-linear map $h: V \times W \rightarrow Z$ can be written as $h
      = \tilde{h} \circ \phi$ where $\tilde{h}$ is unique.

    - The tensor product is *associative* $(A \otimes B) \otimes C = A \otimes (B \otimes C)$


*** Exact sequence 

    In the context of group theory, a sequence of morphisms $G_0 \rightarrow^{f_0} G_1 \rightarrow^{f_1} ... G_n$ is 
    exact if the image of each moprhism is the kernel of the next.

    - The sequence 0 -> A -> B is exact only if the map from A to B is a monomorphism
    - The sequence B -> C -> 0 is exact only if the map from B to C is an epimorphism
    - The sequence 0 -> A -> B -> C -> 0 is called exact if A -> B is mono and B -> C is epi
    
** Algebras and co-algebras
*** $k$ algebra (with tensor products)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
K \otimes A \arrow[r, "u \otimes 1"] \arrow[rd] & A \otimes A \arrow[d, "\mu"] & A \otimes K \arrow[l, "1 \otimes u"'] \arrow[ld, "\cong"] \\
 & A \arrow[lu, "\cong"] \arrow[ru] & 
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

It is a triple $(A,\mu,u)$, where $A$ is a vector space and with linear maps
$\mu: A \otimes A \rightarrow A$ and $u: K \rightarrow A$ such that the
following hold:

  - $m(a \otimes m(b \otimes c)) = m(m(a \otimes b) \otimes c)$
  - $\mu(u(1) \otimes x) = \mu(x \otimes u(1)) = x, \forall x$ (algebra is unitary)

*** $k$ algebra (as a ring)

    A tensor product $m: A \otimes A \rightarrow A$ makes $A$ a *ring* with
    a *bilinear* multiplication $\cdot: A \times A \rightarrow A$, i.e. $$ a \cdot b = m(a
    \otimes b)$$ Viceversa, we can create an $m$ from a ring $A$, because
    multiplication is a bilinear map.

*** Direct sum of abelian groups 

Given two abelian groups $A, B$, their direct sum $A \oplus B$ is the set of
pairs $(a,b)$ where the product is defined as $$(a_1, b_1) + (a_2, b_2) =
(a_1 + a_2, b_1 + b_2)$$

*** S-Graded object
- Given a set $S$ and a category $C$, a graded object is a functor $S
  \rightarrow C$, where the set $S$ is treated as a discrete category. 
  It can be seen as a family of objects $\{ C_{s\in S} \}$
- These families form a category $C^G$ where natural transformations between $X,
  Y: S \rightarrow C$ are morphisms.
- If $S$ is a monoid then $C^G$ can be equipped with a monoidal tensor product 
  $$(X \otimes Y)_s = \coprod_{u+v = s} (X_u \times Y_v)$$

*** Graded vector space

It is a vector space whose underlying abelian group can be seen as a direct sum
of other abelian groups (each one making up its own vector space)

$$V = \bigoplus_{n \in \mathbb{N}} V_n$$

where each $V_n$ is a vector space. For a given $n$ the
elements of $V_n$ are then called homogeneous elements of
degree $n$.

*** Graded ring

A graded ring is a ring that is a direct sum of abelian groups $R_i$ such that
$R_i R_j \subseteq R_{i+j}$, i.e., the product takes $R_{g} \times R_{g'} \rightarrow
R_{g g'}$

*** Graded module

A module $M$ is graded over a graded ring $R$ if 

- $M=\bigoplus M_i$ and
- $R_iM_j \subseteq M_{i+j}$

Examples: 

- A graded vector space is a graded module where $R$ has trivial grading.
- A graded ring is a graded module over itself.

*** Graded algebra

- A $k$ algebra $A$ is graded a graded module (over the ring $k$) where $\mu: A
  \otimes A \to A$ preserves the degree.

- It has a vector space decomposition: $$A = A_0 \oplus A_1 \oplus A_2 \cdots$$

- $A_i$ has homogeneous elements of degree $i$ such that $a_i \otimes a_j \in
  A_{i+j}$

*** Hilbert series of the dimensions of a $k$ algebra.

    The following formal series $$\textrm{Hilb}(A,q) = \sum_{d} \textrm{dim}(A_d)q^d$$ is 
    a formal series representing the dimensions of a graded algebra.

*** Example $k$ algebra: polynomials
- Polynomials $\KK[x]$ form a vector space with basis vectors $1, x, x^2,
  \ldots$ that can be equipped with a tensor product and a multiplication $$\mu:
  \KK[x] \otimes \KK[x] \rightarrow \KK[x]$$ that works as polynomial
  multiplication (e.g., $\mu(x^2 \otimes 3x) = 3x^3$) with $u(1) = 1$

- for $\KK[x] = \bigoplus_d (\KK[x^d])$ we have $$ \textrm{Hilb}(\KK,q)=\sum_d
  q^d$$

*** Example $k$ algebra: polynomials in more than one variable

    - for $B[x_1 ... x_n] = \bigoplus_d B_d$ where $$B_d=\KK[x_1^{a_1} ...
      x_n^{a_n}, a_1 + ... + a_n = d]$$ we have $$\textrm{Hilb}(B,q)=\sum_d
      {n+d-1 \choose d}q^d=(1-q)^{-n}$$

    # RESTART FROM HERE: https://www.youtube.com/watch?v=Extra4r0Y

*** Example $k$ algebra: group Algebra 

    - A group algebra $\KK[G]$ for a group $G$ and a field $\KK$ is a vector space
      where every vector has the form $$z_1g_1 + z_2g_2 + \ldots$$

    - Multiplication defined on the basis elements is the group product
      $$\mu(g_i \otimes g_j) = g_ig_j$$ while $u(1)=e$

*** Tensor product of algebras
:PROPERTIES:
:BEAMER_opt: fragile
:END:
If $A$ and $B$ are $k$ algebras, so is $A \otimes B$ with $$\mu_{A \otimes B}(a_1 \otimes
b_1 \otimes a_2 \otimes b_2) = \mu_A(a_1 \otimes a_2)\otimes\mu_B(b_1 \otimes b_2)$$ 

in other words: 

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
A \otimes B \otimes A \otimes B \arrow[rr, "id \otimes \tau \otimes id"] \arrow[rrrr, "\mu_{A \otimes B}", bend left] &  & A \otimes A \otimes B \otimes B \arrow[rr, "m_A \otimes m_B"] &  & A \otimes B
\end{tikzcd}
#+END_EXPORT
#+END_CENTER



*** Tensor algebra
 - A tensor algebra is a graded algebra $$T[V] = \bigoplus_d V^{\otimes d}$$
   where $V^{\otimes d}$ is $V$ tensored with it self $d$ times (itself an
   algebra). Multiplication $T(V) \otimes T(V) \rightarrow T(V)$ is
   juxtaposition extended linearly. 

 - It is is also called the *free algebra on the vector space V*, and is functorial. 

 - It is also a bi-algebra with $\Delta(v) = v \otimes 1 + 1 \otimes v$

*** Symmetric algebra
    - A symmetric algebra is a quotient algebra: $$SV = TV/(v\otimes w - w
      \otimes v)$$ The ideal is homogeneous so the resulting quotient is graded.
    - In other words, $v\otimes w = w \otimes v$.

*** Exterior algebra 
    An exterior algebra is a quotient algebra: $$\Lambda V = TV/(v\otimes v)$$
    The ideal is homogeneous so the resulting quotient is graded.
*** $k$ -Coalgebra 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

It is a triple $(C, \Delta, \epsilon)$ where $C$ is a vector space,
$\Delta: C \rightarrow C \otimes C$, and $\epsilon: C \rightarrow k$
such that coassociativiy diagrams for $\Delta$ commute (same diagrams as
$k$ -algebra but reversed):

#+BEGIN_EXPORT latex
\begin{center}
\begin{tikzcd}
C \arrow[r, "\Delta"] \arrow[d, "\Delta"] & C \otimes C \arrow[d, "id \otimes \Delta"] \\
C \otimes C \arrow[r, "\Delta \otimes id"] & C \otimes C \otimes C
\end{tikzcd}

\begin{tikzcd}
 & C \arrow[d, "\Delta"] \arrow[ld] \arrow[rd] &  \\
\mathbb{F} \otimes C & C \otimes C \arrow[l, "\epsilon \otimes id"] \arrow[r, "id \otimes \epsilon"] & C \otimes \mathbb{F}
\end{tikzcd}
\end{center}
#+END_EXPORT

*** Example algebra: algebra $A = (int(P))^*$ derived from an incidence algebra

- Given an incidence co-algebra $C$, one can define its *incidence algebra* as the
  space $C^* = \{ f: C \rightarrow k \}$, where multiplication $m$ is $\Delta^*
  \circ \rho$ so:

  #+BEGIN_EXPORT latex
  \begin{equation}
  \begin{split}
  m(\phi \otimes \psi)([x,y]) & = \np{\Delta^* \circ \rho (\phi \otimes \psi)}{[x,y]} \\
  & = \np{\rho(\phi \otimes \psi)}{\Delta([x,y])} \\
  & = \sum_{z \in [x,y]}\phi([x,z])\psi([z,y]) 
  \end{split}
  \end{equation}
  #+END_EXPORT

- The unit $u: k \rightarrow C^*$ is the linear extension of $$u(1) = [x,y] \mapsto x == y $$

*** Deriving a $k$ algebra from a $k$ co-algebra      
:PROPERTIES:
:BEAMER_opt: fragile
:END:
- Given a co-algebra $C$, $C^*$ is an algebra (over $k^{\star}$). In fact, I can
  build $u,m$ and $\rho$ such that the following diagrams commute:

  #+BEGIN_EXPORT latex
  \begin{tikzcd}
  K \arrow[r, "u"] \arrow[rd, "\phi"] & C^* & C^* \otimes C^* \arrow[r, "m"] \arrow[rd, "\rho", hook] & C^* \\
  & K^* \arrow[u, "\epsilon^*"] &  & (C \otimes C)^* \arrow[u, "\Delta^*"]
  \end{tikzcd}
  #+END_EXPORT

- $C^*$ is the convolution algebra as it uses convolution to multiply functions
  living in $C^*$. 

- Note: $(\rho(c^* \otimes d^*), c \otimes d) = (c^*, c)(d^*, d)$ is a
  homomorphism and an injection.

- $\phi$ is a linear function that maps $K$ to functions on $K$. 

*** Example $k$ coalgebra: Polynomial co-algebra
- One can build a co-algebra on polynomials them selves, when each basis of the
  tensor space built over $\KK[x]$ can be decomposed through comultiplication
  as: $$\Delta(x^n) = \sum_i x^i \otimes x^{n-i}$$
- and co-unit $\epsilon: \KK[x] \rightarrow \KK$ as $$\epsilon = x^n \mapsto (n==0)$$
 
*** Example $k$ coalgebra: Incidence coalgebra $C = int(P)$

- Given a poset $P$, one can define an *interval* by choosing two points of $P$
  (e.g., $x$ and $y$) and all the intermediates $z$: $$[x,y]=\{ z\in P: x \leq z
  \leq y \}$$

- Consider now the free vector space of all the intervals of $P$, $int(P)$. It can be
  equipped with a tensor product (which basically creates pairs), and in turn,
  one can define a co-multiplication: $$\Delta([x,y])=\sum_{z \in [x,y]} [x,z]
  \otimes [z,y]$$ where the co-unit $\epsilon([x,y]) = (x=y)$.

*** Example $k$ coalgebra: Coalgebra of set 
Take a set $S$, we have that the formal sums of the set's elements $C = \KK[S]$
(or $C=span(S)$) is a co-algebra with $\Delta_C(s)= s \otimes s \forall s \in S$ and
$\epsilon(s) = 1 \forall s \in S$.

*** Example $k$ coalgebra: Set of subsets ordered 

Given a set $S$, one can define the a poset over it, ordered by inclusion: $$2^S
= \{ T \subset S \}$$ Given this poset, one can build an incidence co-algebra $C=int(2^S)$

*** Example $k$ coalgebra: group co-algebra 

    - A group coalgebra $\KK[G]$ for a group $G$ and a field $\KK$ is a vector
      space where every vector has the form $$z_1g_1 + z_2g_2 + \ldots$$ and where 
      $$\Delta(g) = g \otimes g, \epsilon(g)=1 \forall g$$

    - Note that $\KK[G]$ is also an algebra; this makes it a bi-algebra. Multiplication defined on the basis elements is the group product:

      $$\mu(g_i \otimes g_j) = g_ig_j$$ while $u(1)=e$


*** Sub-algebra 
Given: 

- $B$ is an algebra
- $A \subseteq B$ (subspace) 

then:

- $A$ is a *sub-algebra* if $m(A \otimes A) \subseteq A$ and $1_B \in A$
- $A$ is an ideal if $m(A \otimes B) \subseteq A$ (and viceversa, if you want a
  *two sided ideal*).

*** Sub-coalgebra 

Given:

- D co-algebra 
- $C \subseteq D$ (subspace)

then 

- $C$ is a sub-coalgebra if $\Delta(C) \subseteq C \otimes C$
- $C$ is a co-ideal if $\Delta(C) \subseteq C \otimes D + D \otimes C$

*** Duality of homomorphisms                                       :noanki:

Proposition: given $f: C \rightarrow D$ a co-algebra homomorphism, $f^*: D^*
\rightarrow C^*$ is an algebra homomorphism.

One should prove that $f^*$ is multiplicative: $$f^*(d^* e^*) = f^*(d^*)f^*(e^*)$$

because: $$\np{\fs(\ds\es)}{c} = \np{\ds\es}{f(c)}$$

*CONTUNUE FROM HERE, NOT FINISHED*

*** Mobius function                                                                 :noanki:

- Given an incidence algebra $\phi$, one can ask whether there exists a way to
  build the multiplicative inverse of each function in $C^*$, and in particular of
  the inverse of $\zeta([x,y])=1$ which we call $\mu$.

- This is in fact the mobius function which we define recursively:
  $$\mu([x,y])=-\sum_{z\in[x,y]}\mu([x,z])$$

*** Sweedler notation for co-algebras

- Assume you want to write a formula for $\Delta: C \rightarrow C \otimes C$; this 
  actually corresponds to a linear combination of tensors:
  $$\Delta(c) = \sum_i \lambda_i (c_{1,i} \otimes c_{2,i}) \cong \sum_i (c_{1,i} \otimes c_{2,i})$$
  $$ = \sum_{(c)} (c_{(1)} \otimes c_{(2)})$$

  where $\lambda_i$ is absorbed and subscript notation is removed.
- Extension:

  \begin{equation}
  \begin{split}
  \Delta_2 (c) = (\Delta \otimes id) \circ \Delta & = \sum_{(c)} c_{(1)} \otimes c_{(2)} \otimes c_{(3)} [: C  \rightarrow C \otimes C \otimes C ]\\ 
  \Delta_{n-1}(c) & = \sum_{(c)} c_{(1)} \otimes \ldots \otimes c_{(n)} [: C \rightarrow \otimes^n C ] \\
  \end{split}  
  \end{equation}

*** Sweedler notation  and multilinear functions
- Given $f: C \times C \times ... \rightarrow V$ that descends to $\phi: C \otimes C
  \otimes ... \rightarrow V$ (fundamental property of tensors) we can write
  $$\phi \circ \Delta_{n-1} (c) = \sum_{(c)} \phi (c_{(1)}
  \otimes c_{(2)} ...) = \sum_{(c)} f(c_{1}, c_{2}, \ldots) $$

  for example: $$(\Delta \otimes id)\Delta = \sum_c (\Delta \otimes id)(c_1
  \otimes c_2) = \sum_c \Delta(c_1) \otimes c_2$$

- Co-associativity law: $\sum_c \Delta(c_1)\otimes c_2 = \sum_c c_1\otimes \Delta(c_2)$
- Co-unit law: $\sum_c \epsilon(c_1)\otimes c_2 = c = \sum_c c_1 \otimes \epsilon(c_2)$

*** $k$ algebras homomorphisms
:PROPERTIES:
:BEAMER_opt: fragile
:END:
 #+BEGIN_CENTER
 #+BEGIN_EXPORT latex
 \begin{tikzcd}
A \otimes A \arrow[r, "f \otimes f"] \arrow[d, "m_A"] & B \otimes B \arrow[d, "m_B"] \\
A \arrow[r, "f"] & B \\
 & K \arrow[lu, "u_A"] \arrow[u, "u_B"]
\end{tikzcd}
 #+END_EXPORT
 #+END_CENTER

If $f$ is linear and it respects the above commutative diagrams then it is a homomorphism.

*** $k$ co-algebra homomorphisms
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
C\otimes C &  & D \otimes D \arrow[ll, "f \otimes f"] \\
C \arrow[u, "\Delta_C"] \arrow[rrd, "\epsilon_C"] &  & D \arrow[u, "\Delta_D"] \arrow[ll, "f"] \arrow[d, "\epsilon_D"] \\
 &  & K
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

In Sweedler notation: $$\sum_{(d)} f(d_{(1)}) \otimes f(d_{(2)}) = \sum_{f(d)} f(d)_{(1)} \otimes f(d)_{(2)}$$

*** Co-algebra homomorphism $kS \rightarrow int(2^S)$ where $S$ is a set
:PROPERTIES:
:BEAMER_opt: fragile
:END:

- Given a generator of $kS$ (i.e., an element $s \in S$) it maps to an interval
  in $int(2^S)$

- One can try with $f: s \mapsto [ \{s\}, \{s\}]$ and in fact it respects
  co-associativity and co-unit.

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
{[\{s\},\{s\}] \otimes [\{s\},\{s\}]} &  & s \otimes s \arrow[ll, "f \otimes f"] \\
{[\{s\},\{s\}]} \arrow[u, "\Delta_{Int(2^S)}"] &  & s \arrow[u, "\Delta_{KS}"] \arrow[ll, "f"]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*** Group Algebra as formal sum

    - A group algebra $\KK[G]$ for a group $G$ and a field $\KK$ is a vector space
      that is the direct sum of copies of $\KK$ indexed by $G$.

    - In practice, the basis $e_g$ is a vector that has a dimension $|G|$ and
      whose $g-th$ component is 1.

    - Each element of the algebra is thus a formal linear combination of the
      elements of $G$ with coefficients in $\KK$, i.e., $$f = \sum_{g\in G}a_{g,f}
      e_g$$ where $e_g$ are basis in $\KK[G]$.

*** Group Algebra as function space

    Given a group $G$ and a field $K$, we can build an algebra $K[G]$ where

    - vectors are functions $f: G \rightarrow K$ for $K$ either a ring or
      field.
    - $(f_1 + f_2) = g \mapsto f_1(g) + f_2(g)$
    - $(\alpha f) = g \mapsto \alpha f(g)$
    - $(f_1 \times f_2) = g \mapsto \sum_{u \in G}f_1(u)f_2(u^{-1}g)$

*** $k$ Bialgebra
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
A \otimes A \arrow[d, "\mu"] \arrow[r, "\Delta \otimes \Delta"] & A \otimes A
\otimes A \otimes A \arrow[d, "\mu_{2} "] \\
A \arrow[r, "\Delta"] & A \otimes A
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- Both an algebra and a coalgebra. $\Delta$ and $\epsilon$ should be algebra morphisms.
  Equationally: 

  $$\Delta(a_1 \cdot a_2) = \Delta(a_1) \cdot \Delta(a_2)$$

- For a group algebra, $\mu_2$ must be defined as:

  $$\sum (g_ig_j \otimes g_ig_j) = \sum \mu_2(g_i \otimes g_i \otimes g_j \otimes g_j)$$

  i.e., $\mu_2 = (\mu \otimes \mu) \circ (id \otimes \tau \otimes id)$.


#  Note that one must define $\mu_{A \otimes A} = (\mu \otimes \mu) \circ (id \otimes \tau
#  \otimes id)$ where $\tau$ is the twist map.

*** $k$ Bialgebra - convolution
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd} 
C \arrow[rrr, "f \star g", bend left] \arrow[r, "\Delta"] & C \otimes C \arrow[r, "f \otimes h"] & A \otimes A \arrow[r, "\mu"] & A
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

In a bi-algebra, we can define the convolution operator $$\star: A^C \times A^C
\rightarrow A^C$$ such that $$f \star h = \mu \circ (f \otimes h) \circ \Delta$$

*** $k$ Bialgebra - antipode 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

An antipode $S$ is the morphism $C \rightarrow A$ for which $id 
\star S = u \circ e$, i.e., the following commutes:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & K \arrow[rrd, "u"] &  &  \\
C \arrow[ru, "\epsilon"] \arrow[r, "\Delta"] & C \otimes C \arrow[r, "Id \otimes S"] & A \otimes A \arrow[r, "\mu"] & A
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

For example, the antipode $S$ for a group algebra is such that $$\mu \circ (Id
\otimes S) (g \otimes g) = u(1)$$ i.e., $S(g) = g^{-1}$.


** Modules
*** R-Module

    Generalization of vector space. A pair $(V,K)$ where

    - $(K,(+ ,0),(\cdot,1))$ is a *ring*
    - $(V,+,e)$ is an abelian group under addition

    Moreover, the following operation should be total (scalar multiplication)
    \[
    *: K \times V \rightarrow V
    \]

*** Modules over division rings

    - Much of the linear algebra results can be applied to modules over division
      rings as the latter are almost fields.

*** Simple module

It is a module that does not have non-zero proper submodules

*** Semisimple module
A module is semisimple if it is the direct sum of simple (irreducible)
submodules

*** Projector
    - A *projector* is a linear operator $P: X \rightarrow X$ for which $P^2=P$.

    - It is characterized by the exact sequence: $$(1-P)X \rightarrow X
      \rightarrow_P X$$ i.e., $(1-P)X$ is its kernel.

    - $P$ endows $X$ with a direct sum composition $$X \simeq X_1 \oplus X_2 =
      PX \oplus (I-P)X$$

*** Projector image
      The image of a projector $P$ is an *invariant* under $P$: $$ P(PX)=(PX) \sim Pw=w$$

*** Projector kernel
      Given a projector $P$, $X_2 = (1-P)X$ is the kernel of $P$ by definition: $$PX_2 = P(1-P)X = (P-P^2)X = 0$$

*** Representation of algebras
Given an algebra $A_k$ and a vector space $V_k$ ($k$ is a field), a
representation of $A$ is a homomorphism: $$T: A \rightarrow Hom_k(V, V)$$

which satisfies: 

- $T(a_1 + a_2) = T(a_1) + T(a_2)$
- $T(a_1a_2)=T(a_1)T(a_2)$
- $T(\alpha a)=\alpha T(a)$

*** A-Module 

An $A$ module is a vector space where in place of a ring or a field, we use use
an algebra. The multiplication $$*: A \times V \rightarrow V$$ is just the
uncurried representation of $A$ $$\rho_A: A \rightarrow (V \rightarrow V)$$

* Category theory - basics

** Category basics
*** Category

A category is a triple $\mathcal{C}(O, M, \bullet)$ that abides these laws:

- *identity*: $\forall o \in O, \exists id_o \in M$

- *composition*: '$\bullet$' composes morphisms in $M$ that share source and target :

  1. $\bullet(A \rightarrow B, B \rightarrow C) = A \rightarrow C$

  2. $(f \bullet g) \bullet h == f \bullet (h \bullet g)$

  3. $id_x \bullet f = f \bullet id_y$

*** Section
    - A section $s$ for a morphism $f$ is such that $$f \circ s = Id$$
      
    - Every section is a mono-morphism.

    - A section is always paired with a retraction: $r \circ s = Id$. $r \circ s$
      form always a pair $e \circ m$ where $e$ is epi and $m$ is mono.

*** Retraction
    - A retraction $r$ for a morphism $f$ is such that $$r \circ f = Id$$
    
    - Every retraction is an epi-morphism

    - A retraction is always paired with a section: $r \circ s = Id$. $r \circ s$
      form always a pair $e \circ m$ where $e$ is epi and $m$ is mono.

** Monoid (Category)

*** Monoid as a category
    - A monoid $\mathcal{M}(M, id_0, \star)$ is just a category $\mathcal{C}(O, M, \star)$ where O = $\{ o_1 \}$ and $id_0 = id_{o1}$.

    - The elements $M$ of a monoid are the morphisms $M$ of the corresponding
      category. As such, *associativity* holds.

*** Free Monoid
:PROPERTIES:
:placement: 18,0
:END:

- A free monoid of M is just a monoid $\mathcal{M}(List[G], [], ++)$

- It has a free generator set G and all its elements are uniquely determined by
  a fold of elements in $G$.

*** Action

An action of a $\mathcal{M}(M, id_0, \star)$ over a set $S$ of states is a
function  \[ \alpha: M \times S \rightarrow S \]. The following properties should be satisfied:

- identity: $\alpha(id_0, s) = s$

- compatibility: $\alpha(f \star g, s) = \alpha(f, \alpha(g, s))$

** Preorder, partial and linear order (Category)

*** Preorder as a category

A *preorder* is a category $\mathcal{C}(O, M, \bullet)$, where there is at most one
morphism between objects. It has the following properties:

- *reflexivity*: from identity morphisms

- *transitivity*: from composition of morphisms

*** Partial order as a category

A *partial order* (*poset*) is a preorder where, if there are arrows, these cannot
form loops (except for identity arrows).

- *reflexivity*: from identity morphisms

- *transitivity*: from composition of morphisms

- *antisimmetry*: $x \rightarrow y \rightarrow x \Rightarrow x = y$

*** Poset interval
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Given a poset $P$, one can define an interval as the *subposet* $I_{x,y}=\{ i: x \leq i \leq y \},
x,y,i \in P$. For example, here:

#+BEGIN_EXPORT latex
\begin{tikzcd}
a &  \\
z_1 \arrow[u] & z_2 \arrow[lu] \\
z_3 \arrow[u, "m_1"] & z_4 \arrow[u, "m_2"] \\
b \arrow[u] \arrow[ru] & 
\end{tikzcd}
#+END_EXPORT

we can see at least 3 intervals: $\{ \{ a, b, z_1, z_2 \}, \{a, b, z_1, z_2, z_3, z_4\}, \{a,b,z_3, z_4 \} \}$.

*** Linear order as a category

- A Linear order is a partial order where there exists at least 1 arrow between elements:

  \[x \rightarrow y \in M \Rightarrow y \rightarrow x \notin M\]

- Basically, either one or the other but all objects pairs have morphisms

*** Meet

A *meet*

- is the unique *product* of two objects in a poset

- it is regarded as the *minimum* of two objects

- in boolean algebra, it can be seen as the *and* operation

*** Join

A *join*

- is the unique *coproduct* of two objects in a poset

- it is regarded as the maximum of two objects

- in boolean algebra, it can be seen as the *or* operation

*** Lattice as a category

A lattice is a poset where *all objects* have a *meet* and a *join*

** Special categories
*** Categorical nomenclature (*small* and *large* cats)

    - A *class* is a collection of sets that share a property.

    - Large category $C$: Either $ob(C)$ or both $ob(C)$ and $hom(C)$ are proper
      classes (i.e., a class that is not a set).

    - Locally small category $C$: $hom(C)$ is a set (*Set* is just an example)

    - Small category $C$: $ob(C)$ and $hom(C)$ are sets

*** Groupoid

 A (small) *groupoid* is a (small) category in which all morphisms are
 *isomorphisms*. I.e., composition has a *two sided inverse*.

*** Big category

 A category of categories ($CAT$) that:

 - has functors as morphisms
 - excludes itself.

*** Product category

Given two categories $C$ and $D$, a product category $C \times D$ is such that

- Objects are all possible pairs of original objects

- Morphisms are all the corresponding morphisms

*** Monoidal and cartesian categories (diagram)
:PROPERTIES:
:BEAMER_opt: fragile
:END:
# edit here: https://tikzcd.yichuanshen.de/#eyJub2RlcyI6W3sicG9zaXRpb24iOlsyLDBdLCJ2YWx1ZSI6IlxcdGV4dGJme01vbm9pZGFsfSJ9LHsicG9zaXRpb24iOlszLDBdLCJ2YWx1ZSI6IihcXG90aW1lcywgMSwgXFxhbHBoYSwgXFxsYW1iZGEsIFxccmhvKSJ9LHsicG9zaXRpb24iOls1LDFdLCJ2YWx1ZSI6IlxcdGV4dGJme0JyYWlkZWR9In0seyJwb3NpdGlvbiI6WzUsMl0sInZhbHVlIjoiXFx0ZXh0YmZ7U3ltbWV0cmljfSJ9LHsicG9zaXRpb24iOls2LDFdLCJ2YWx1ZSI6IlxcZXhpc3RzIEJfe3h5fTogeCBcXG90aW1lcyB5IFxccmlnaHRhcnJvdyB5IFxcb3RpbWVzIHgifSx7InBvc2l0aW9uIjpbNiwyXSwidmFsdWUiOiJCX3t4eX0gXFxjaXJjIEJfe3l4fSA9IDFfe3ggXFxvdGltZXMgeX0ifSx7InBvc2l0aW9uIjpbMiwzXSwidmFsdWUiOiJcXHRleHRiZntDYXJ0LiBDbG9zZWR9In0seyJwb3NpdGlvbiI6WzIsMl0sInZhbHVlIjoiXFx0ZXh0YmZ7Q2FydGVzaWFufSJ9LHsicG9zaXRpb24iOlszLDJdLCJ2YWx1ZSI6IihcXG90aW1lcyA9IFxcdGltZXMpICsgXFx7IFxcRGVsdGEsIFxcZXBzaWxvblxcfSJ9LHsicG9zaXRpb24iOlszLDNdLCJ2YWx1ZSI6IkhvbV9DKGEgXFx0aW1lcyBiLGMpIFxcY29uZyBIb21fQyhhLGJeYykifSx7InBvc2l0aW9uIjpbMSwyXSwidmFsdWUiOiJcXHRleHRiZntDb0NhcnRlc2lhbn0ifSx7InBvc2l0aW9uIjpbMSwzXSwidmFsdWUiOiJcXHRleHRiZntCaUNhcnRlc2lhbn0ifSx7InBvc2l0aW9uIjpbMCwyXSwidmFsdWUiOiIoXFxvdGltZXMgPSArKSJ9XSwiZWRnZXMiOlt7ImZyb20iOjIsInRvIjowfSx7ImZyb20iOjMsInRvIjoyfSx7ImZyb20iOjcsInRvIjowfSx7ImZyb20iOjYsInRvIjo3fSx7ImZyb20iOjgsInRvIjozfSx7ImZyb20iOjExLCJ0byI6MTB9LHsiZnJvbSI6MTEsInRvIjo3fV19

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\tiny
\begin{tikzcd}
 & \textbf{Monoidal} & {(\otimes, 1, \alpha, \lambda, \rho)} &  \\
 &  & \textbf{Braided} \arrow[lu] & \exists B_{xy}: x \otimes y \rightarrow y \otimes x \\
{(\otimes = \times) + \{ \Delta, \epsilon\}} & \textbf{Cartesian} \arrow[uu] \arrow[r] & \textbf{Symmetric} \arrow[u] & B_{xy} \circ B_{yx} = 1_{x \otimes y} \\
{Hom_C(a \times b,c) \cong Hom_C(a,b^c)} & \textbf{Cart. Closed} \arrow[u] &  & 
\end{tikzcd}
#+END_EXPORT
#+END_CENTER


*** Monoidal category 
   - A category $C$ is *monoidal* if: 

     1. there is a tensor product $\otimes: C \times C \rightarrow C$ defined
        for all objects that respects associativity (through associators and unitors).

     2. there is a unit object for that product.

*** Cartesian category
It is a monoidal category where the tensor product is a normal product defined
for all objects and the unit is the terminal object.

*** Cartesian closed category
It is a cartesian category that has exponentials.


*** Monoidal category of endofunctors 
    Endofunctors and natural transformations form a category. If there are
    additional natural transformations of the type $T\times T \rightarrow T$ then
    this category is a monoidal category. These monoids are called monad.

*** Category of objects under object $b$ (coslice category)
:PROPERTIES:
:BEAMER_opt: fragile
:END:
Assume $b$ is an object of category $C$ and construct the category of objects
under $b$ called $(b \downarrow C)$ with objects all pairs $\np{f}{c}$ where $f$
is an arrow $f: b \rightarrow c$. Morphisms between these objects are those that
make the following diagram commute:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & \mathbf{b} \arrow[ld, "f", dotted] \arrow[rd, "f'", dotted] &  \\
c \arrow[rr, "h"] &  & c'
\end{tikzcd}
#+END_EXPORT
#+END_CENTER


One might define also the category of /objects over $a$/ called $(C \downarrow a)$
by taking the opposite arrows.

*** Category of pointed sets $Set_{\star}$ (example of co-slice category)

In this category, 

- An object is a pointed set $(A \in Set,\nu_a)$ with a distinguished point $\nu_a \in A$.

- A morphism $f: A \rightarrow B$ is a morphism that is /point preserving/ if
  $f(\nu_a) = \nu_b$

- This category corresponds to $(\star \downarrow Set)$ where $\star$ is the
  singleton set, as arrows between $\star$ and any set corresponds to picking
  element $\nu_A$ in it.

*** Category of objects (functor)-under object $b$
:PROPERTIES:
:BEAMER_opt: fragile
:END:
Given the functor $S: D \rightarrow C$, the category of objects /S-under/ $b$ ($b
\downarrow S$) is the set of all pairs $\np{f}{d}$ where the following diagram
commutes:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & b \arrow[ld, "f"] \arrow[rd, "f'"] &  \\
Sd \arrow[rr, "Sh"] &  & Sd'
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*Example:* If $S$ is the forgetful $Grp \rightarrow Set$, fixing $x$ gives a
category ($x \downarrow S$) with objects $\np{g}{f}$, $f$ mapping elements of
$x$ into the underlying set of $g$. Among them, we find the objects
$\np{F(x)}{\eta}$ where $\eta$ maps $x$ into the underlying set of the free
group $F(x)$.



** Set category
*** Monomorphisms (Sets)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
B \arrow[r, "g_1", bend left] \arrow[r, "g_2", bend right] \arrow[rr, "f \circ g_1", dotted, bend left=49] \arrow[rr, "f \circ g_2", dotted, bend right=49] & C \arrow[r, "f", hook] & D
\end{tikzcd}
#+END_EXPORT
#+END_CENTER
- $f$ is a monomorphism if $$\neg\exists (g_1, g_2) ~~ g_1 \neq g_2 \wedge f \circ g_1 = f \circ g_2$$

- If $f$ is not mono, one could find $g_1 \neq g_2$ for which
  $$f(a_1) = f(a_2) \rightarrow f \circ g_1 = f \circ g_2$$ 

*** Epimorphisms (Sets)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
B & C \arrow[l, "g_1"', bend right] \arrow[l, "g_2"', bend left] & D \arrow[l, "f"', tail] \arrow[ll, "g_1 \circ f"', dotted, bend right=49] \arrow[ll, "g_2 \circ f"', dotted, bend left=49]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- $f$ is an epimorphism if $$\neg\exists (g_1, g_2) ~~ g_1 \neq g_2 \wedge g_1 \circ f = g_2
  \circ f$$

- If $f$ is not surjective, there are elements in $C$ which will not participate
  to $g_{*} \circ f$ (/terra incognita/). There will be thus $g_1$ and $g_2$ that differ only in
  terms of those excluded terms while their composition is the same.

*** Terminal object (Sets)

There is a set 1 for which, for any set $X$, there is a unique function $X \rightarrow 1$.
This is called the *terminal object*.

*** Unit of categorical product (Sets)

The unit of a categorical product is the terminal object, $X \times 1 \simeq X$

*** Sets sharing an element (Sets)

If:

- there is a monomorphism $m: B \rightarrow X$

- and there is $k: 1 \rightarrow B$ such that $x: 1 \rightarrow X$ factors through $m$, i.e.,  $x = m \circ k$

then $x \in B$

*** Subobject (Sets)

Any object $B$ for which there exists a monomorphism $B \rightarrow X$ is a subset/subobject of $X$.

*** Equalizer (Sets)

Given two functions ($g_1, g_2: X \rightarrow Y$), an equaliser is an *object* and
*monomorphism* *pair* $(E,m: E \rightarrow X)$ for which the following
properties hold:

1. *Equivalence*: $g_1 \circ m = g_2 \circ m$
2. *Limit*: for any other object pair $(O,m_o: O \rightarrow X)$ where $g_1 \circ
   m_o = g_2 \circ m_o$, there exists a unique morphism $f: O \rightarrow E$ such
   that $m_o = m \circ f$

$E$ should be understood as the subset of elements of $X$ for which $g_1(x) =
g_2(x)$, i.e., the solutions of the equation.

*** Function objects (Sets) 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

    - The object-morphism pair $(r^{p}, eval: r^{p} \times p \rightarrow r)$
      makes an *exponential object* if for all other object-morphism pair $(q, e)$ there exists 
      a mapping $\lambda(e)$ such that the following commutes:

      #+BEGIN_CENTER
      #+BEGIN_EXPORT latex
      \begin{tikzcd}
      q \times p \arrow[rd, "e"] \arrow[r, "\lambda(e) \times id"] & r^{p} \times p \arrow[d, "eval"] \\
      & r
      \end{tikzcd}
      #+END_EXPORT
      #+END_CENTER

    - the mapping $\lambda(e): q \rightarrow r^{p}$ is called the called
      *currying* of $e$. 

    - a cartesian closed category is equipped with an isomorphism between $Hom(Q
      \times P, R) \cong Hom(Q, R^P)$

** Kleisly category and monads
*** Kleisly category ($C_T$) definition
    - Assume $C$ is a category with an endofunctor $T$ and a morphism $\mu: T^2 C \rightarrow C$
    - $C_T$ has the same object as $C$ but any morphism $A \rightarrow_T B$ is
      built by picking a morphism $A \rightarrow T B$ in the following way:
      - The *identity* for any $A$ is constructed by picking a morphism $\eta_A: A
        \rightarrow T A$
      - The composed arrow $h_T = f_T \circ g_T : A \rightarrow_T C$ is the
        the one built as $h: A \rightarrow T C$ such that $$ h = \mu
        \circ T f \circ g$$
      - Note that $T f: T B \rightarrow T^2 C$
    - The relationship between $C$ and $C_T$ is an example of /adjunction/
*** Monads 
    Given a category $C$, A monad corresponds to the data of:
    - an endofunctor $T: C \rightarrow C$
    - a unit natural transformation $\eta: 1_C \Rightarrow T$ (where $1_C$ is the identity endofunctor)
    - a multiplication natural transformation $\mu: T^2 \Rightarrow T$ arising
      from functor composition so that, seeing the endofunctors as objects in
      the monoidal category of endofunctors $C^C$, the unit and the
      multiplication can be used to make $T$ a monoid. Recall that,
      multiplication is functor composition.

*** Monads from adjoint functors 
:PROPERTIES:
:BEAMER_opt: fragile
:END:
:LOGBOOK:
CLOCK: [2018-07-26 Thu 11:19]--[2018-07-26 Thu 11:24] =>  0:05
:END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
D~\textrm{with}~\epsilon: LR \rightarrow I_d \arrow[rr, "R(\textrm{ight})", bend right=49] & \bot & C~\textrm{with}~\eta: I_c \rightarrow R L \arrow[ll, "L(\textrm{eft})", bend right=49]
\end{tikzcd}
#+END_EXPORT
    - A monad is the shadow cast by an adjunction into the domain of the left-adjoint $C$.
    - It raises from natural transformations that one can build on the base functor $T=RL$.
    - The adjunction ensures that $\mu: RLRL \rightarrow RL$ is natural.
*** Monads from adjoint functors (Maybe monad)
:PROPERTIES:
:BEAMER_opt: fragile
:END:
:LOGBOOK:
CLOCK: [2018-07-26 Thu 11:19]--[2018-07-26 Thu 11:24] =>  0:05
:END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
Set_{*} \arrow[rr, "R(\textrm{ight})~\textrm{forgetful}", bend right=49] & \bot & Set  \arrow[ll, "L(\textrm{eft}) ~ \textrm{free}", bend right=49]
\end{tikzcd}
#+END_EXPORT

- The left-adjoint is *free* and takes each set $S$ (in $Set$) to the pair $(S \cup \{\nu_S\}, \nu_S)$. 
  while morphisms $f: A \rightarrow B$ are mapped to point preserving functions $Lf (\nu_A) = \nu_B$
- The right-adjoint just returns $S \cup \{\nu_S\}$
- $\eta = LR$ adds a new basepoint to the set and the natural transformation is given
  by natural inclusion.
- $\mu = LRLR$ map the two new points (because we have to LR in series) to a single
  given by $LR$.

*** Monad laws (left identity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[A]} \arrow[d, "f^o"] & A \arrow[l, "r"] \arrow[ld, "f"] \\
        {T[B]} & 
        \end{tikzcd}
        #+END_EXPORT

     $f^o$ is the bound function. It should commute with the return of the monad.

*** Monad laws (right identity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:


        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[A]} \arrow[d, "r^o"] \arrow[d, "id"', bend right] & A \arrow[l, "r"] \arrow[ld, "r"] \\
        {T[A]} & 
        \end{tikzcd}
        #+END_EXPORT
     
    Bound return equals identity.

*** Monad laws (associativity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

        
        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[M]} \arrow[d, "f^o"] & M \arrow[ld, "f"] \\
        {T[M']} \arrow[d, "g^o"] & M' \arrow[ld, "g"] \\
        {T[M'']} & 
        \end{tikzcd}
        #+END_EXPORT

     $g^o \circ f^o = (g^o \circ f)^o$

*** Free monads (construction)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
{A + T[\tilde{F}[A]]} \arrow[d] \arrow[r] & {A+T[X]} \arrow[d] \\
\tilde{F}[A] \arrow[u, "\pi + \phi"] \arrow[r] & {X}
\end{tikzcd}
#+END_EXPORT

 - Given a functor $T[-]$, the *free monad* $\tilde{F}[A]$ can be built as the fixed
   point of functor $A+T[-]$, where $A$ is an arbitrary object.
 - It is possible to show that $\tilde{F}[A]$ is a functor and *a monad* in $A$.

*** Free monads (construction)

#+BEGIN_EXPORT latex
\begin{tikzcd}
1 \arrow[rd, "k_1", dotted] & A \arrow[d, "k_2", dotted] & S \rightarrow A \arrow[ld, "k_3", dotted] \\
 & {T[A]} \arrow[d, "\textrm{liftF}"] &  \\
 & {\tilde{F}[A]} & 
\end{tikzcd}
#+END_EXPORT

- Define commands $k_1, ..., k_n$ as constructors for values in functor $T[A]$
  and compose with ~liftF~ to create a monadic value.

- $A$ must be interpreted as the value that should be passed to the next
  computation. Example:

  : data ConsoleF a =
  :      PutStrLn String a      -- k_1: A -> T[A]
  :    | GetLine (String -> a)  -- k_2: (S -> A) -> T[a]
  :    deriving (Functor)

*** Free monads (bind)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
{T[\tilde{F}[A]]} \arrow[r] \arrow[d, "Tf^o"] & {\tilde{F}[A]} \arrow[d, "f^o"] \arrow[r, "\pi"] \arrow[l, "\phi"] & A \arrow[ld, "f", dashed] \arrow[l] \\
{T[\tilde{F}[B]]} \arrow[r] & {\tilde{F}[B]} \arrow[l, "\phi"] & 
\end{tikzcd}
#+END_EXPORT

- binding a function $f$ (i.e., $f^o$) depends on whether it comes from a pure
  $\pi$ or a free $\phi$: $$f^o = \begin{cases} f \circ \pi^{-1} \\ \phi\circ
  Tf^o \phi^{-1}\\ \end{cases}$$



*** Free monads (interpretation)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
T \arrow[r, Rightarrow, "\phi"] \arrow[d, Rightarrow, "\textrm{liftF}"'] & M \\
\tilde{T} \arrow[ru, Rightarrow, "\textrm{run}"'] & 
\end{tikzcd}
#+END_EXPORT
- A value can be built into the free monad $\tilde{T}[ ]$ 
  with monad syntax and interpreted with a custom ~run~ into a monad $M$.
- Some authors derive ~run~ from a natural transformation $\phi$.

*** Free monads (composition)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
    
#+BEGIN_EXPORT latex
\begin{tikzcd}
T \arrow[rr, "InL"] \arrow[d] &  * \arrow[d, "freeM"] & (T+G) \arrow[d] &  & G \arrow[ll, "InR"'] \arrow[d] \\
\tilde{T} \arrow[rr] &  * & \tilde{T+G} &  & \tilde{G} \arrow[ll]
\end{tikzcd}
#+END_EXPORT

-   Given two functors $T$ and $G$, one can build a free monad of $(T+G)$ by
    lifting with $freeM$ the injection morphisms.

*** Suspended computation and continuation monads
    - A function ~(a -> r) -> r~ is called a suspended computation (SC). It needs a way
      to transform its intermediate value ~a~ into its final result ~r~.
    - Such a way is provided by means of a continuation ~a -> r~.
    - SCs form an endofunctor $Hom(Hom(-,R),R)$; this endofunctor can be made
      into a monad where a new ~SC b~ can be built from an ~SC a~ by specifying ~a ->
      SC b~ (bind).
** Functors
*** Functor definition

A functor \[ F : \mathcal{C} \rightarrow \mathcal{C'} \] is a pair $(F_o, F_m)$ where

- $F_o$ maps *each object* in $\mathcal{C}$ into an object in $\mathcal{C'}$, while

- $F_m$ maps *each morphism* in $\mathcal{C}$ with laws 

#+BEGIN_EXPORT latex
\begin{equation}
\begin{split}
  F(h \bullet g) & = F(h) \bullet F(g) \\
  F(id_o) & = id_F(o) \\
\end{split}
\end{equation}
#+END_EXPORT

*** Full functor

A *full functor* $T: C \rightarrow D$ is an *epimorphism* between morphisms in $C$ and $D$.

*** Faithful functor

A faithful functor $T: C \rightarrow D$ is a *monomorphism* between morphisms in $C$ and $D$.

*** Identity functor
    $Id: C \rightarrow C$ is a functor that maps an object to itself and a
    function to itself.

*** Constant $\Delta_c$ functor
    A constant functor $\Delta_c: B \rightarrow C$ is a functor that maps every
    object in $B$ into a single object $c \in C$ and every morphism into the
    identity map on $c$.

*** Bifunctors

- A bifunctor over $C$ and $D$ is a functor over pairs of objects and morphisms,
  i.e., $C \times D \rightarrow E$

- Products and co-products are special bifunctors $C \times C \rightarrow C$

*** Contravariant functors
:PROPERTIES:
:BEAMER_opt: fragile
:END:

    - A contravariant functor is a functor $C^{op} \rightarrow D$. It basically
      maps inverse arrows in $C$ to $D$.
      #+BEGIN_CENTER
      #+BEGIN_EXPORT latex
      \begin{tikzcd}
      c & Fc \arrow[d, "Ff"] \\
      c' \arrow[u, "f"] & Fc'
      \end{tikzcd}
      #+END_EXPORT
      #+END_CENTER

    - An example is the functor $F[-] = Q^{(-)}$ which is indexed by an object $Q$ and maps each object $c$ 
      to the set of morphisms from $c$ into $Q$.

      #+BEGIN_CENTER
      #+BEGIN_EXPORT latex
      \begin{tikzcd}
      c & Q^c \arrow[d, "Ff = \lambda q^c. q^c \circ f"] \\
      c' \arrow[u, "f"] & Q^{c'}
      \end{tikzcd}
      #+END_EXPORT
      #+END_CENTER

*** Profunctors

    A pro-functor is a functor $D^{op} \times C \rightarrow Set$. 

*** Combination of functors

    - $T(X) = X = Id$ is a functor

    - $T(X) = A = \Delta_A$ is a functor

    - If $F_1(X)$ and $F_2(X)$ are functors then $T(X) = F_1(X) + F_2(X)$ is a
      functor
    - If $F_1(X)$ and $F_2(X)$ are functors then $T(X) = F_1(X) * F_2(X)$ is a functor

    - If $F_1(X)$ is a functor then $T(X) = F_1(X)^A$ is a functor


    Thus any polynomial expression in an object $X$ can be made into a functor.

*** Curry-Howard-Lambek isomorphism


    | *Logic*          | $\top$   | $\bot$  | $a \wedge b$ | $a \vee b$ | $a \Rightarrow b$ |
    | *Types*          | ()       | Void    | (a,b)        | Either a b | $a \rightarrow b$ |
    | *C. C. Category* | terminal | initial | $a \times b$ | $a + b$    | $b^a$             |

    - Proving a logic predicate means constructing an element of a specific type

    - A cartesian closed category is a model for logic and category theory
*** Natural transformation of functors $F \rightarrow G$

    It is a way of comparing functors; given two functors $F,G: C \rightarrow D$, I
    can create compare them by :
    - picking to objects object $c_1,c_2$ and a morphism $f: c_1 \rightarrow c_2$
    - picking in $D$ a morphism $\alpha_{c_1}$ in $D$ that maps $Fc_1$ to $Gc_1$
      (the family of $\alpha_c$ is called *components of the NT*).
    - picking in $D$ a morphism $\alpha_{c_2}$ in $D$ that maps $Fc_2$ to $Gc_2$
    How can I detect any relation between $F,G$ meaning they are similar? This
    naturality condition is $$\alpha_{c_2} \circ F f = G f \circ \alpha_{c_1},
    \forall c_1,c_2$$

*** Natural transformation maps morphisms to ...

    A natural transformation maps a morphism to a commuting diagram (*naturality
    square*).

*** Natural isomorphims

    All the components of a NT are invertible

*** Category of functors and natural transformation
    - If I compose the components of two natural transformations $\alpha: F a
      \rightarrow G a$ and $\beta: G a \rightarrow H a$, do I have another
      natural transformation? yes
    - Is there an identity NT? yes, it is the family of identity morphisms $F a \rightarrow F a$
    - The category of functors from $C$ into $D$ is called $D^C$
    - In 'Cat', the morphisms between categories (functors) are not only a set but a category

*** Cells 

- 0-cell is an object
- 1-cell is a morphism
- 2-cell is a morphism between morphisms


*** 2-category 
- A class of 0-cells (objects): $A,B,C$ 

- For all 0-cells $A$ and $B$, there is a category of morphisms $C(A,B)$ where:

  - objects are the morphisms between $A$ and $B$ (called 1-cell)
  - morphisms are morphisms between morprhisms and are called 2-cells.

- Example: CAT, where 1-cells are functors and 2-cells are natural transformations

*** 2-category vertical composition
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 A \arrow[r, "\Downarrow \alpha"', bend left=49] \arrow[r] \arrow[r, "\Downarrow \beta", bend right=49] &  B & \implies \exists  & A \arrow[r, "\Downarrow \alpha \circ \beta"', bend left=49] \arrow[r, bend right=49] & B
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

This is the canonical composition of natural transformations

*** 2-category horizontal composition
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
A \arrow[r] \arrow[r, "\Downarrow \alpha"', bend left=49] \arrow[r, "\Downarrow \beta", bend right=49] & B \arrow[r] \arrow[r, "\Downarrow \gamma"', bend left=49] \arrow[r, "\Downarrow \delta", bend right=49] & C \implies & A \arrow[r] \arrow[r, "\Downarrow (\gamma \circ_1 \alpha)"', bend left=49] \arrow[r, "\Downarrow (\delta \circ_1 \beta)", bend right=49] & C
\end{tikzcd}
#+END_EXPORT
#+END_CENTER




    
*** Representable functors  
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
a \arrow[rr, "d^{(-)}", dashed] \arrow[rrr, "F(-)", dashed, bend left] &  & d^a \in \textbf{Set} \arrow[d] \arrow[r] & \cong d^a \arrow[d] \\
b \arrow[u] \arrow[rr, dashed] \arrow[rrr, dashed, bend right] &  & d^b \in \textbf{Set} \arrow[r] & \cong d^b
\end{tikzcd}
#+END_EXPORT
    - Given an object $d \in C$, we have a functor $d^{(-)}: C^{op} \rightarrow Set$ 

    - Given a generic contravariant functor $F: C^{op} \rightarrow Set$, we say that it is
      *representable* by $d$ if it is isomorphic to $d^{(-)}$.

*** Representable functor in Haskell

: class Representable f where 
:   type Rep f :: *                 -- this is d in (-)^d
:   tabulate :: (Rep f -> x) -> f x -- natt (-)^d -> f (-)
:   index :: f x -> (Rep f -> x)    -- other way around

- Works if you think about (~Rep f)~ as the index into the container (~f x)~.
  For example streams are representable while lists are not.

- Another example is the matrix functor that is representable by a pair of integers. 
  A morphism from ~(int,int) -> a~ is one on one with a matrix ~Matrix a~.


*** Universal property 
A universal property of object $X$ is a description of either $X^{(-)}$ or
$(-)^X$ functors or any other functor isomorphic to them. We say that $X$
*represents the functor*, while the functor encodes the *universal property* of $X$.

*** Universal property of initiality

If there exists an object $X$ for which $(-)^X$ is isomorphic to the functor 

$$\textrm{sing} : (-) \mapsto \{ \cdot \}$$ 

that maps objects to the singleton set, then we say that $X$ is *initial.* We also
say that sing is representable by $X$.

*** Universal property of finality 

If there exists an object $X$ for which $X^{(-)}$ is isomorphic to the functor 

$$\textrm{sing} : (-) \mapsto \{ \cdot \}$$ 

that maps objects to the singleton set, then we say that $X$ is final.
This means that, the set of morphisms into $X$ from any other object is singleton.

*** Universal property encoded by $1_{Set}: Set \rightarrow Set$
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Take $1_{Set}$ as the *identity functor* in the category $Set$ then, in the
following diagram:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
x \in Set \arrow[d, "f"] \arrow[r, "1_{Set}"] & x \arrow[d, "f"] \arrow[r, "\cong"] & x^? \arrow[l] \arrow[d, "f_*"] \\
y \arrow[r, "1_{Set}"] & y \arrow[r] & y^? \arrow[l, "\cong"]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

The *singleton set* is the only value for (?) that represents $1_{Set}$ because
only for that object there is a natural transformation that makes the right
square commute.

*** Universal property encoded by the forgetful functor $U: Grp \rightarrow Set$
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
G \arrow[d, "f"] \arrow[r, "U"] & S_G \arrow[d, "f_U"] \arrow[r, "\cong"] & G^? \arrow[l] \arrow[d, "f_*"] \\
H \arrow[r, "U"] & S_H \arrow[r] & H^? \arrow[l, "\cong"]
\end{tikzcd}
#+END_EXPORT

The only value for $?$ is the group $Z$. i.e., the *free group on a single
generator*. So $Z$ represents $U$. In fact, the set $G^Z$ is the set of
homomorphisms from $Z$ to $G$ whose size depends on which of the elements of $G$
we map the generator.


*** Universal arrow from object
:PROPERTIES:
:BEAMER_opt: fragile
:END:
- A *universal arrow from object* $c \in C$ allows to factor all morphisms $f'$ 
  through morphisms in the codomain of incoming functor $S: D \rightarrow C$.

- It is an object/morphism pair $(r, u)$ such that the following diagrams commute.

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
                    & c \arrow[ld, "u",red] \arrow[rd, "f'"] &  \\
Sr \arrow[rr, "Sh"] &                                        & Sd \\
r \arrow[rr, "h"]   &                                        & d \\
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*** Universal arrow from object (comma category view definition)
:PROPERTIES:
:BEAMER_opt: fragile
:END:
Given the functor $S: D \rightarrow C$, we can define a universal arrow from
object $c$ to $S$ as the initial object $\np{r}{u}$ in the comma category $(c
\downarrow S)$

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
                    & c \arrow[ld, "u",red] \arrow[rd, "f'"] &  \\
Sr \arrow[rr, "Sh"] &                                        & Sd \\
r \arrow[rr, "h"]   &                                        & d \\
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*** Universal arrow from object / defining functions from free vector spaces
:PROPERTIES:
:BEAMER_opt: fragile
:END:


- $U\KK[X]$ is the set of vectors in $\KK[X] = span(X)$.
- $j_X$ injects the basis into the whole set $U\KK[X]$. It is universal.
- Any (linear) $f: \KK[X] \rightarrow W$ can be defined by choosing $g$ (*extending
  it*) $$Uf \circ j_X = g$$

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
                                         & X \arrow[ld, "j_x",red] \arrow[rd, "g"] &  \\
U\KK[X] \arrow[rr, "Uf"]                 &                                         & UW \\
\KK[X] \arrow[rr, "f (\textrm{linear})"] &                                         & W \\
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

$j_X$ could be thought of as the cases where the input parameter of $U_x$ are
just those in $X$. If $f$ is linear, it suffices to specify its value only for
those cases.


*** Universal element 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
\mathbb{SET} & \{ \ldots u \ldots \} \arrow[rr, "Hf_x"] & & \{ \ldots x \ldots \} \\
\mathbb{U}   & U \arrow[rr, "!\exists f_x"]             & & X
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

Assume a functor $H: \mathbb{U} \rightarrow \mathbb{SET}$, we define $(U, u)$ is a universal element of $H$ if, for every $(X,x)$ there exists a
unique $f_x$ such that $Hf_x(u) = x$.

*** Universal element (Sets and equivalence relations)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Given: 

- a functor $H=(-)_E^S$ giving the set of functions starting from $S$ into $[-]$
  where $sEs' \implies fs = fs'$.

- a function $p$ that is the familiar mapping $S \rightarrow S/E$

Then, $(S/E,p)$ is the universal element of $H$ so, if $f$ respects equivalence,
there exists a unique $f'$ such that $f=f'p$.

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
\mathbb{SET} & \{ \ldots p: S \rightarrow S/E \ldots \} \arrow[rr, "Hf'"] &  & \{ \ldots f : S \rightarrow X \ldots \} \\
\mathbb{SET} & S/E \arrow[rr, "!\exists f'"] &  & X
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*** Universal element (Groups and quotients) 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Given a functor $H=(-)^G_N$ giving the sets of homomorphisms from $G$ for which
$fN=1$ and $p$ as the mapping into cosets $G \rightarrow G/N$ then $(G/N,p)$ are
a universal element of $H$.

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
\mathbb{SET} & \{ \ldots p: G \rightarrow G/N \ldots \} \arrow[rr, "Hf'"] &  & \{ \ldots f : G \rightarrow G' \ldots \} \\
\mathbb{GRP} & G/N \arrow[rr, "!\exists f'"] &  & G'
\end{tikzcd}
#+END_EXPORT
#+END_CENTER





*** Universal arrow vs universal element
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & * \arrow[ld] \arrow[rd] &  \\
HU = \{ ... u ... \} \arrow[rr, "Hf"] &  & HX=\{...x...\} \\
U \arrow[rr, "f"] &  & X
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

Considering the category of pointed sets and a generic functor, a universal
element $(U,u)$ is exactly a universal arrow from $*$ to $H$.

*** Universal arrow to object
:PROPERTIES:
:BEAMER_opt: fragile
:END:
- A *universal arrow to object* $c \in C$ from $S$ is an object/morphism pair $(r,
  v)$ such that, in the following diagram, for any $f$ there is an $f'$ such
  that it commutes

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & c &  \\
Sr \arrow[ru, "v"] &  & Sd \arrow[ll, "Hf'"] \arrow[lu, "f"] \\
r &  & d \arrow[ll, "f'"]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

*** Universal arrow to object, product example
:PROPERTIES:
:BEAMER_opt: fragile
:END:


#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & a \times b \arrow[ld, "p"] \arrow[rd, "q"] &  &  & {\langle a, b \rangle} &  \\
a & c \arrow[u, "h"] \arrow[l, "f"] \arrow[r, "g"'] & b & \Delta (a \times b) \arrow[ru, "{\langle p, q \rangle}"] &  & \Delta c \arrow[ll, "{\langle h, h \rangle}"] \arrow[lu, "{\langle f, g \rangle}"'] \\
 &  &  & a \times b &  & c \arrow[ll]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

Projection functions $\ang{p, q}$ from the product $a \times b$ (and the product itself) are
the universal arrow from the functor $\Delta(c) = \ang{c,c}$ to the object $\ang{a,b}$.

** Functor algebras 
*** Definition of algebras and co-algebras
    - An algebraic operation in domain $X$ is a morphism from tuple objects to $X$
      e.g.: $$ X \times A
      \rightarrow X$$ or $$ A \rightarrow X $$

    - A co-algebraic operation in domain $X$ is a morphism from $X$ into a tuple
      object, possibly containing $X$: $$ X \rightarrow A \times
      X $$

*** Functoriality of products, coproducts, exponential and powersets

    - The product operation in a category $C$ is a bi-functor $(-) \times (-): C
      \times C \rightarrow C$ (it maps both *pairs of objects* to a *product object*
      and *pairs of functions* to a *product function*).

    - Fixed an object $A$ there is a functor $(-)^A: C \rightarrow C$ that maps $X$
      into $X^A$ (the exponential object).

    - The identity map is (endo-)functorial as well as the endomap that maps $X$
      into a fixed object.

*** How to build morphisms of polynomial functors with respect to original morphism

    - If we can build functors for products and coproducts, we can build functors
      also for their combination;

    - For example: $T(X) = X + (C \times X)$
      maps X to an object $X + (C \times X)$ but also morphisms $f: X \rightarrow X'$:

      $$T(f) = f + (id_C \times f): X+(C\times X) \rightarrow X'+(C \times X')$$

*** Functors mapping to 1 and 0                                    :noanki:

    - $X \rightarrow 1$ is the functor that maps $X$ into the singleton set (final object)

    - $X \rightarrow 0$ is the functor that maps $X$ into the emtpy set (initial object)

*** Relevant (natural) identities between polynomial functors

    - There are isomorphisms that make some functors equivalent, e.g. $X \times
      Y = Y \times X$ or $(X \times (Y + Z)) = (X \times Y) + (X \times Z)$.

    - They follow the same rules of addition and multiplication of numbers
*** Functor algebra

    Given a polynomial (endo-)functor $T$ that maps $X \in C$ to $T(X) \in
    C$, a functor algebra for $T$ is a pair $(U,a)$:

    - an object $U \in C$ (*carrier*)
    - a morphism $a: T(U) \rightarrow U$ (*algebra structure*)

    $a$ must be defined by a cotuple of several functions whose signature is
    specified by $T$. For example, $$T(X) = 1 + X + (X \times X)$$ defines $$e:
    1 \rightarrow U, i: X \rightarrow X, m: (X \times X) \rightarrow X$$ which
    might encode the signature of group operations.

*** Functor algebra example - natural numbers

    $0$ and $S$ maps over natural numbers can be seen as a functor algebra
    $([0,S],\mathbb{N})$ of the functor $T(X) = 1 + X$.

*** Homomorphisms of algebras

    Given two T-functor algebras $(U, a: T(-) \rightarrow -)$ and $(V, b: T(-) \rightarrow -)$,
    a homomorphism of algebras from $(U,a)$ to $(V,b)$ is a function $f: U \rightarrow V$ which commutes
    with the operations $$ f \circ a = b \circ T(f)$$

*** Whole point of (co-)algebras
    - define functions indirectly exploiting fixed (co-)algebraic constructors
      and finality/initiality
    - so one has to specify only the initial algebra $A$ and another algebra $B$
      and automatically the morphism can be built. In general, the morphisms
      used by $B$ are not recursive.

*** Initial algebras
    - Fixed a functor $T$, functor algebras $(U, a: T(U) \rightarrow U)$ can be
      seen as categorical objects with algebra homomorphisms as morphism.

    - In this category, an *initial algebra* is an algebra for which there exist
      one and only one morphism from it to all the other algebras.

*** Lambek's lemma
    if $a: T(U) \rightarrow U$ is an initial algebra then there is an
    inverse $a^{-1}: U \rightarrow T(U)$ such that $T(U) \simeq U$.

*** An initial algebra defines homomorphisms by induction (integers)

    - Let's indicate with $(N, [0,S]: 1 + N \rightarrow N$) the *initial* algebra of
      natural numbers.

    - An object $Q$ equipped with a functor algebra $$(Q, [q_0,q_S]:
      1+Q\rightarrow Q)$$ defines, by induction, one and only one algebra
      morphism $f: N \rightarrow Q$.

      - $f \circ 0 = q_0$
      - $f \circ S = q_S \circ f$

      i.e, $$f = n \mapsto q_S^n(q_0)$$

*** An initial algebra defines homomorphisms by induction (lists)

    * Let's indicate with $(A^*, [e,c]: 1 + A \times A^* \rightarrow A^*$) the
      *initial* algebra of lists of $A$.

    * An algebra $$(Q^*, [q_e,q_c]:
      1+A \times Q^* \rightarrow Q^*)$$ defines, by induction, one and only one algebra
      morphism $f: A^* \rightarrow Q^*$.

      - $f \circ e = q_e$
      - $f \circ c = q_c \circ (id \times f)$

    * For example, an algebra $$(\mathbb{N}, [0, S \circ \pi]: 1+A \times
      \mathbb{N} \rightarrow \mathbb{N})$$ defines implicitly the length of a list

*** Proofs by induction with initial algebras
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
1 + P \arrow[r, "1 + i"] \arrow[d] & 1 + N \arrow[d] \\
P \arrow[r, "i", hook] & N \arrow[l, "!\exists", bend left]
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- Predicate $P$ subset of $N$ by an inclusion morphism $i$. 

- ($0 \in P$ and $n \in P \Rightarrow (n+1) \in P$) means there exists an algebra for $P$.

- Since there is only algebra morphism from $N$ to $N$ (id) this means that
  $i$ must be an epi-morphism.

*** Principle of list induction for a predicate on the set of lists
    To show that a predicate/set $P$ is equal to the set of all lists $A*$, it is enough to
    show the following:

    - $empty \in P$
    - $\forall a, \alpha \in P \Rightarrow cons(a,\alpha) \in P$

    i.e., 
    - $P$ can be understood as an algebra $$(P, [empty,cons]: 1 + A\times P \rightarrow P)$$ 
    - $P$ is a subalgebra of $A^*$ because there is a morphism $i: P \rightarrow A^*$
    - Since $A^*$ is initial, any morphism $A^* \rightarrow A^*$ is the identity
      (by uniqueness), so $i$ is epi and mono (iso).
*** Fixed point functors
    - Initial algebras for some functors are already known. If we start from a
      generic functor $t$, the type of an initial algebra $I$ should be such
      that $I \cong t(I)$ (Lambeck).
    - Assuming $I \sim F~t$ we have $F~t = t~(F~t)$, which can be created
      through a recursive data type ~Fix t = Fx t (Fix t)~. Fx encodes algebraic
      operations $t(I) \rightarrow t$.
*** Catamorphisms 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
t ~ I \arrow[r, "t~g"] \arrow[d, "Fx~(\textrm{unfix})"] & t~E \arrow[d, "k"] \\
I \arrow[u] \arrow[r, "g"] & E
\end{tikzcd}
#+END_EXPORT
#+END_CENTER


    - Given an initial algebra $(I, Fx: t~I \rightarrow I)$ and a generic algebra $(E, k)$, a
      generic morphism $g: I \rightarrow E$ can be defined as $g = k \circ (t~g) \circ unfix$
    - We say that $g = cata(k)$; given the same expression in $I$, I can create
      mappings into several other types by simply specifying the non-recursive
      $k$.

*** Catamorphisms fusion law 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
tI \arrow[r, "t(\kappa f)"] \arrow[d] & tE \arrow[d, "f"] \arrow[r, "th"] & tH \arrow[d, "g"] \\
I \arrow[r, "\kappa f"] \arrow[rr, "\kappa g"', bend right] & E \arrow[r, "h"] & H
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- if you must compose $h$ with a catamorphism $\kappa f$, and $h$ is an $(E,f) \rightarrow (H,g)$ algebra
  homomorphism, then you can take directly the catamorphism of the second
  algebra $g$: $$ h \circ \kappa f = \kappa g $$

- This amounts to say that $h$ must be a morphism in the (comma) category of objects under $I$.
- You bypass the intermediate structure $E$ (which might be a list) to generate
  directly the output $H$ (e.g., an integer).


*** Catamorphism compose law 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
gI \arrow[r] \arrow[d] & gI \arrow[r, "h", red] \arrow[rd, "Fix \circ h" description] & tI \arrow[rd, "f", red] \arrow[d, "Fix" description] &  \\
I \arrow[rr, "\kappa(Fix \circ h)", blue] &  & I \arrow[r, blue, "\kappa f"'] & I
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

Defined as $$\kappa f \circ \kappa(Fix \circ h) = \kappa (f \circ h)$$ Note,
this should be a prepromorphism, e.g., if $h$ is a nat. transf. such that
$\kappa (Fix \circ h)$ filters something then you could compose it directly with
the algebra $f$ instead of applying two times the catamorphism.


*** Catamorphism compose law example (optimizing expressions)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
gI \arrow[r] \arrow[d] & gI \arrow[r, "unFix~\circ~h"] \arrow[rd, "h" description] & tI \arrow[rd, "f"] \arrow[d, "Fix" description] &  \\
I \arrow[rr, "\kappa h"'] &  & I \arrow[r, "\kappa f"'] \arrow[u, "unFix" description, bend right=49] & I
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

If $I$ is an expression type, and $h$ and $f$ are optimizations expressed as
F-algebras, you can do a single optimization pass by composing their algebras:
$$\kappa f \circ \kappa h = \kappa (f \circ unFix \circ h)$$


      
*** Hylomoprhisms
   - Given a initial and final algebra $A$, I can create a morphism $g: B
     \rightarrow C$ from a coalgebra $B$ and an algebra $C$ by $$g = cata(c) \circ ana(b)$$

*** Paramorphisms 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
t~I \arrow[d] \arrow[r] & t~(I \times Z) \arrow[d, "f"] \\
I \arrow[r, "cata(f)"] \arrow[rd, "para(f)"'] \arrow[u] & I \times Z \arrow[d, "\pi_Z"] \\
 & Z
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- Given $t(N) = 1 + N$ (initial algebra is nats), the factorial is
  $para(f)$ with 

#+BEGIN_EXPORT latex
\begin{equation}
f(n,z)
\begin{cases}
1   & n=0\\
n*z & \textrm{otherwise}\\
\end{cases}
\end{equation}
#+END_EXPORT




*** Expression data types as functors
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Two ways to build them, 

1. recursive data type which needs an explicitly recursive function to interpret it.

  #+BEGIN_EXAMPLE
  data Exp = Const Int | Neg Exp | Add Exp Exp 
  #+END_EXAMPLE

- Using a non-recursive data type
  
  #+BEGIN_EXAMPLE
  data ExprF e = Const Int | Neg e | Add e e deriving functor
  type Expr = Fix ExprF
  #+END_EXAMPLE

  #+BEGIN_EXPORT latex
  \begin{tikzcd}
  1 \arrow[r, "const"] & {ExprF[Expr]} \arrow[d, "Fx"] \arrow[r] & {ExprF[Int]} \arrow[d, "rules"] \\
  Expr \times Expr \arrow[ru, "Add", bend left=49] & Expr \arrow[r, "eval"] \arrow[u, "Neg", bend left=60] & Int
  \end{tikzcd}
  #+END_EXPORT

  Build expressions in ~Expr~ with original type constructors, evaluate with ~eval
  = cata rules~.

*** Parser combinators
:PROPERTIES:
:BEAMER_opt: fragile
:END:

- A /parser/ of A ($P[A]$), is an object $A^S$ which takes a string (type $S$) and returns a value $A$.

- A parser combinator, is a /higher order function/ that takes two or more parsers
  and returns a new parser (e.g., $alt: P[A]\times P[B] \rightarrow P[A+B]$ and
  $seq: P[A]\times P[B] \rightarrow P[A\times B]$):

  #+BEGIN_CENTER
  #+BEGIN_EXPORT latex
  \begin{tikzcd}
  A^S \times B^S \arrow[d, "alt"] & A^S \times B^S \arrow[d, "seq"] \\
  (A+B)^S & (A \times B)^S
  \end{tikzcd}
  #+END_EXPORT
  #+END_CENTER

- $P[A]$ is a functor in $A$; You can get a parser $PB$ for object $B$ if you have $P[A]$ and $A \rightarrow B$.

*** Parsers with recursion schemes interpreters
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
- Assume $L[]$ is a functor that extends $N[]$ and $\widetilde{L}$ is its
  initial algebra.

- We can define a combinator parser for $\widetilde{L}$ (blue) by exploiting
  $N[]$'s constructor and two additional functions (red).

- Here we show the case for $n_2[\widetilde{L}]:
  \widetilde{L}\times\widetilde{L} \rightarrow N \widetilde{L}$

  #+BEGIN_CENTER
  #+BEGIN_EXPORT latex
  \begin{tikzcd}
  L[\widetilde{L}] \arrow[d,"\phi",red] \arrow[r] & (P \circ L)[\widetilde{L}] \arrow[d,"P \phi"]  & (P \circ N)[\widetilde{L}] \arrow[l,"\gamma",red] \arrow[ld, "P\phi \circ \gamma"] \\
  \widetilde{L} \arrow[r]   & P [\widetilde{L}] & P [\widetilde{L}] \times P [\widetilde{L}] \arrow[u, "Pn_2"] \arrow[l, "P\phi\circ\gamma \circ P n_2", blue]
  \end{tikzcd}
  #+END_EXPORT
  #+END_CENTER

** Functor co-algebras
*** Co-algebra
    Given a polynomial (endo-)functor $T$ that maps $X \in C$ to $T(X) \in
    C$, a functor co-algebra for $T$ is a pair $(U, c)$

    - an object $U \in C$ (*carrier*)
    - a morphism $c: U \rightarrow T(U)$ (*co-algebra structure*)

    $c$ must be defined by a tuple of several functions whose signature is
    specified by $T$. For example, $$T(X) = A \times X$$ defines $$(value,next):
    (U \rightarrow A, U \rightarrow U)$$ for any process $U$.
*** Homomorphisms of co-algebras

    Given two T-functor co-algebras $(U, a: - \rightarrow T(-))$ and $(V, b: - \rightarrow T(-))$,
    a homomorphism of algebras from $(U,a)$ to $(V,b)$ is a function $f: U \rightarrow V$ which commutes
    with the operations $$ T(f) \circ a = b \circ f$$
*** Final co-algebra
    - A final coalgebra $d: W \rightarrow T(W)$ is a coalgebra such that for
      every coalgebra $c: U \rightarrow T(U)$ there exists a unique map of
      co-algebras $f: (U,c) \rightarrow (W,d)$

    - Note: we have *initial algebras* and *final* *co-algebras*
    - Example: the final algebra of $T(X) = A \times X$ is $(A^\mathbb{N}, <h,
      t>)$ where $A^\mathbb{N}$ is the set of infinite sequences over $A$, while
      $h,t$ are the *head* and *tail* functions.

*** Examples of final co-algebras
    
    | Functor            | FC Carrier                        | FC Structure         | Notes                 |
    |--------------------+-----------------------------------+----------------------+-----------------------|
    | $A \times X$       | $A^\mathbb{N}$                    | head($a$), tail($a$) | Infinite lists of As  |
    | $1 + (A \times X)$ | $A^{\infty} = A^* + A^\mathbb{N}$ | possnext($a$)        | Finite and inf. lists |
    | $1 + X$            | $\mathbb{N} \cup \{ \infty \}$    | pred($n$)            |                       |
    
*** Bisimulation 
:PROPERTIES:
:BEAMER_opt: fragile
:END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
 & S \times S &  \\
S \arrow[d, "\xi"] & R \arrow[u, hook] \arrow[l, "\pi_1"] \arrow[r, "\pi_2"] \arrow[d, "\gamma"] & S \arrow[d, "\xi"] \\
P(A \times S) & P(A \times R) \arrow[l] \arrow[r] & P(A \times S)
\end{tikzcd}
#+END_EXPORT
    - Assume a final co-algebra $\xi$ (e.g., $T(S) =A \times S$ or $T(S) = P(A
      \times S)$). If one can build a $\gamma$ such that the above commutes then
      $\pi_1=\pi_2$ any pair $(\alpha,\beta) \in R$ implies $\alpha=\beta$.
    - If $S=A^N$, having a bi-simulation means providing a relation $R \subseteq
      A^N \times A^N$ for which this holds: $$\gamma: R(a,b) \Rightarrow h(a) = h(b)
      \wedge R(t(a), t(b))$$ we could say then that $a=b$.
*** Anamorphisms
   - Given a final co-algebra A, and a generic co-algebra $(B,f)$ the unfold of
     $f$ allows to create a mapping $B \rightarrow A$ non-recursively; this is called $ana(f)$.

** Monad algebras
*** Drawbacks of F-algebras

- Given an algebra $(X, \theta: T(X) \rightarrow X)$, with $T(X) = 1 + X^2$ we
  know that $\theta$ has the same signature of a monoid but it should not abide
  by its laws. Not every such algebra is a monoid.

- Monad algebras can help enforce additional structure on functor algebras

*** Monad algebras
:PROPERTIES:
:BEAMER_opt: fragile
:END:

Given a monad $(T,\eta,\mu)$, a *monad algebra* is an algebra of the underlying functor $(X,\theta)$ where,
additionally, the following diagrams commute:

#+BEGIN_CENTER
#+BEGIN_EXPORT latex
\begin{tikzcd}
T(T(X)) \arrow[d, "T\theta"] \arrow[r, "\mu"] & T(X) \arrow[d, "\theta"] & X \arrow[l, "\eta"'] \arrow[ld] \\
T(X) \arrow[r, "\theta"] & X \arrow[ru, "\cong"] & 
\end{tikzcd}
#+END_EXPORT
#+END_CENTER

- The *Eilenberg-Moore* category is built with object $(X,\theta)$ that respect
  the above laws (morphisms are F-algebra morphisms).

- Practically, a monad algebra enforce monoidal laws on $\theta$.



** Natural transformations
*** Natural transformations and parametric polymorphism
    - In PP, I must use a single expression for a parametric function
    - A lot of parametric polymorphic functions ~F a -> G a~ are natural
      transformations by default (theorems for free) and can be used to optimize
      code, e.g.: $$safeTail \circ fmap~f = fmap~f \circ safeTail$$
    - Note, typeclasses represent /ad-hoc/ polymorphism.
    - The return of a monad is a natural transformation
** Adjunctions 
*** Adjoint functors 
:PROPERTIES:
:BEAMER_opt: fragile
:END:
:LOGBOOK:
CLOCK: [2018-07-26 Thu 11:19]--[2018-07-26 Thu 11:24] =>  0:05
:END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
D~\textrm{with}~\epsilon: LR \rightarrow I_d \arrow[rr, "R(\textrm{ight})", bend right=49] & \bot & C~\textrm{with}~\eta: I_c \rightarrow R L \arrow[ll, "L(\textrm{eft})", bend right=49]
\end{tikzcd}
#+END_EXPORT
    - Two categories $C$ and $D$ are equivalent if I can build two functors, one
      going left $L: D \leftarrow C$ and $R: D \rightarrow C$ if their
      composition is naturally isomorphic through $\eta$ and $\epsilon$ 
    - We say that $L$ is /left adjoint/ to R
*** Adjoint functors and homsets
    - It is another way of stating that two functors $L: D \leftarrow C$ and $R:
      D \rightarrow C$ are adjoint by comparing homsets $$D(L c, d) \cong C(c, R
      d)$$ for all $c,d$.
    - If this happens, then $$C(c,RLc)\cong D(Lc, Lc)$$ but $C(c, RLc)$ is our
      family of mappings/natural transformation $\eta$, if it exists. And it
      does, because $D(Lc,Lc)$ is not empty.

*** List monad from adjoint functors
:PROPERTIES:
:BEAMER_opt: fragile
:END:

- $L$ maps a set $X = \{ x_i \}$ into the free monoid of words built 
  by mapping each element into a letter $\ang{x_i}$.
- $U$ is the forgetful functor that produces a set of words $\{ \ang{a},
  \ang{b}, \ang{ab} \dots\}$ forgetting multiplication.

  #+BEGIN_CENTER
  #+BEGIN_EXPORT latex
  \begin{tikzcd}
  \textbf{Mon} \arrow[r, "U"', bend right] & \textbf{Set} \arrow[l, "L"', bend right]
  \end{tikzcd}
  #+END_EXPORT
  #+END_CENTER

- The adjunction $L \ladjof U$ produces the list monad $T=UL$ over set where:

  - $\eta_X$ maps each $x \in X$ to $\ang{x}$ in $ULX$ (the set produced by the
    forgetful functor).
  - $\mu_X$ flattens the list, e.g., $\mu_X(\ang{a\ang{ab}}) = \ang{aab}$


*** Yoneda lemma
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
\textbf{C} & \textbf{Set} &  \\
a \arrow[rr, "F a"] &  & \phi \cong \{ \alpha_{c\in C} \} \\
x \arrow[d] \arrow[r, "(-)^a"'] \arrow[rr, "F(-)", bend left] & x^a \arrow[d] \arrow[r, "\alpha_x"] & Fx \arrow[d] \\
y \arrow[r] \arrow[rr, bend right] & y^a \arrow[r, "\alpha_y"] & Fy
\end{tikzcd}
#+END_EXPORT

- Assume a functor from $F: C \rightarrow Set$ 

- Basically, for every point $p$ in $\phi = F a$ (which is a set) there is a unique
  component of the natural transformation $\alpha_p: (-)^a \rightarrow F$.

*** Cayley's through yoneda

- Take $C = \{ * \}$ the category with a single object.

- Consider that $F = (-)^*$ so we have that $$(*)^* \cong Nat((-)^*, (-)^*)$$.

- But, $(*)^*$ is actually a group $G$ and it can be shown that $Nat(...)$ is actually a subgroup of permutations in
  $S_n$.

** Limits theory
*** Diagram functors
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

- In any category $C$, I can pick objects by expressing a *pattern*, i.e., through
  another (small) *index* or *shape* category $J$ and any functor $D: J \rightarrow C$ (diagram
  functor). 



*** Cone
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  &  & c \arrow[ld, "\lambda_{c,A}"] \arrow[d, "\lambda_{c,B}"] \arrow[rd, "\lambda_{c,C}"] &  \\
A \arrow[r] \arrow[rrrr, dotted, bend right] \arrow[rrrrru, "\Delta_c" description, dashed] & B \arrow[rrrr, "D"', dotted, bend right] \arrow[rrrru, dashed] & C \arrow[l] \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i \arrow[r] & j & k \arrow[l]
\end{tikzcd}
#+END_EXPORT

- A cone over a diagram $D$ is built over natural transformations $\lambda$
  between the constant functor $\Delta_c$ and $D$ (both from the index category
  $S$).

- Consider each family $\lambda_{c,-}$ of morphisms with apex $c$, we define
  $Cone(c,D)$ as the set $\{ \lambda_{c,-} \}$ (as there can be more than one
  family).


*** Limit cone 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
c \arrow[rr, "{Cone(c,D)}"] &  & \{\lambda_{c,-}\} \in Set \arrow[d] \\
c' \arrow[u, "m"] \arrow[rr, "{Cone(c',D)}"] &  & \{\lambda_{c',-}\} \in Set 
\end{tikzcd}
#+END_EXPORT

- $Cone(-,D): C^{op} \rightarrow Set$ is a functor and any morphism $m$ between
  apices is a morphism between cones. If there exists an object $d \in C$ for
  which $Cone(-,D) \cong d^{(-)}$, we say that $d$ is the limit of $D$.

- Alternatively, $d$ is a limit if, for each morphism that arrives to it, there
  is a *single corresponding cone*.

*** Products as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d, "!\exists"] &  \\
 &  &  &  & lim~D \arrow[ld] \arrow[rd] &  \\
1 \arrow[rrr, "D"', dotted, bend right] \arrow[rrrru, dashed] & 2 \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i &  & j
\end{tikzcd}
#+END_EXPORT

- Consider a discrete category of only two object as the index category $S$.

- Any functor $D: S \rightarrow C$ *indexes a generic pair* of objects $(i,j)$
  (there are no choices in terms of morphisms to map) so we can speak of /the/
  functor $D$. MacLane goes as far as saying that $D$ *is a pair of objects*
  $(i,j)$.

- A product object $i \times j$ is the limit of a diagram $D$ built over the 
  above index category.

*** Terminal object as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
c'' \arrow[rd] & c \arrow[d] & c' \arrow[ld] \\
 & lim~D & 
\end{tikzcd}
#+END_EXPORT
    
A terminal object is the limit of apices of cones built over an empty index category.

*** Equalizer as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d, "!\exists"] &  \\
 &  &  &  & lim~D \arrow[ld] \arrow[rd] &  \\
1 \arrow[rrr, "D"', dotted, bend right] \arrow[rrrru, dashed] \arrow[r, bend left] \arrow[r, bend right] & 2 \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i \arrow[rr, bend left] \arrow[rr, bend right] &  & j
\end{tikzcd}
#+END_EXPORT 

An equalizer is the limit of a diagram with two points (1 and 2) and two arrows
from 1 to 2.

*** Pullback (fibered product)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d] &  \\
 & \textrm{Index Cat} &  &  & lim~D \arrow[ld, "p"] \arrow[d, "r"] \arrow[rd, "q"] &  \\
1 \arrow[r] & 2 & 3 \arrow[l] & A \arrow[r, "f"'] & B & C \arrow[l, "g"]
\end{tikzcd}
#+END_EXPORT

- The limit cones should be equal so $$ f \circ p = g \circ q $$ In Set, $lim~D$
  would be a product where $g$ on second element equals to $f$ on first
  element.

- If one uses fibers in $A$ and $B$ to make $f,g$ injective then
  $lim~D$ would be the product of fibers.

*** Fiber 
 - A *fiber* of a function $f$ and a value $b$ is the set of elements for which
   $f(x) = b$.

 - It is a way to make some arbitrary function as injective.

* Type theory
** Dependent types
*** Dependent pair

- Pair of two terms $(a,b)$ where $a: A$ and $b: B_a$. 
- Also called dependent sum because its type can be seen as

  $$(a,b) : \{a_1\} \times B_{a_1} + \{a_2\} \times B_{a_2} \ldots = \sum_{x:A} B_x$$

*** Existential type

Let us now assume that

- $\{ a_i \}$ is the type of the witness that $a_i$ exists.
- $B_{a_i}$ is the type of the witnesses for a proposition that depends on $a_i$.

then the expression of the dependent pair:

$$(a,b) : \{a_1\} \times B_{a_1} + \{a_2\} \times B_{a_2} \ldots $$

can be interpreted in logic as

$$(\exists a_1 \wedge B_{a_1}) \vee  (\exists a_2 \wedge B_{a_2}) \ldots \sim \exists x.B(x)$$

Which explains why dependent pairs are used to express existentially quantified
predicates.


*** Dependent pair example in Haskell

#+BEGIN_EXAMPLE
type family   B (x :: Bool)
type instance B 'True = Int
type instance B 'False = String

data BoolPair where
  (:*:) :: forall x. Sing x -> B x -> BoolPair

f :: BoolPair -> String
f (STrue :*: n) = show n
f (SFalse :*: s) = s
#+END_EXAMPLE

- ~Bool~ is a kind which corresponds to a set of two sets (types) ~'True~ and
  ~'False~. We can't however pattern match on those. To enable matching they 
  must be mapped to a singleton type with is own value constructor.

*** Dependent product

A dependent product is a function from a value $a : A$ into a value $b: B(a)$:
$$ \lambda x.\Phi : \Pi_{x:A} B_x $$ 

- If $A = \{ x_1 \}$ were a singleton type the function would have a constant
  type: $B_{x_1}^{\{x_1\}}$.

- If $A$ were more than one element we would end up with: $$ \Pi_{x:A} B_x =
  B_{x_1}^{\{x_1\}} \times B_{x_2}^{\{x_2\}} \times \ldots $$ 

- If $B$ were constant, we would obtain a simple exponential $$B^{\sum x_i} \sim
  B^A$$
