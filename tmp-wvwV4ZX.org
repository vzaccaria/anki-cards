#+TITLE: Algebra
#+AUTHOR: Vittorio Zaccaria
#+LEVEL: 3
#+OPTIONS: H:3
#+BEAMER_HEADER: \usepackage{tikz-cd}
#+STARTUP: indent 

* Algebraic structures with one operator
** Other structures
*** Magma
    A magma is set $M$ equipped with a single binary operation,
    $(*): M \times M \rightarrow M$ that satisfies:

   - *closure*: $a \in M, b \in M \rightarrow a * b \in M$

** Monoids
*** Monoid

   A monoid $(M,*)$ is a *semigroup* with a unit element ($1 \in M$) where the $*$
   operation satisfies:

   - *identity*: $m * 1 = m, \forall m \in M$.

*** Generator set (Monoid)
    A subset $S$ of $M$ is said to be a generator if all elements $m \in M$
    can be obtained by some kind of *fold* of the elements $s \in S$.

    \[
      \forall m \in M, \exists s_1, \ldots, s_n \in S \textrm{~~s.t.~~} m = s_1 * \cdots * s_n
    \]

*** Free generator set (Monoid)

    A subset $S$ of $M$ is said to be a generator if all elements $m \in M$
    can be obtained by a *unique fold* of the elements $s \in S$.

    \[
      \forall m \in M, \exists s_1, \ldots, s_n \in S \textrm{~~s.t.~~} m = s_1 * \cdots * s_n
    \]

    Not all generator sets are free. For example, $\{1\}$ is a generator for
    $\mathbb{Z}_n$ but it is not free, in the sense that each element of
    $\mathbb{Z}_n$ can be defined by multiple sequences of 1.

*** Free monoid

    A free monoid is a monoid *with a free generator*.

    - Example: $(\mathbb{N}, +)$ is the *free monoid generated by 1*.

*** Abelian monoid
    A monoid $(M,*)$ where $$\forall m_1,m_2 \in M, m_1 * m_2 = m_2 * m_1$$

*** Monoid homomorphisms
    Given two monoids $(X,\star)$ and $(Y, *)$, a homomorphism $$f: (X,\star)
    \rightarrow (Y,*)$$ is a function $f: X \rightarrow Y$ such that:

    \[
      f(1_X) = 1_Y \textrm{~~and~~} f(m \star n) = f(m) * f(n)
    \]

** Groups
*** Group

   A [[https://en.wikipedia.org/wiki/Group_(mathematics)][group]] $G$ is a monoid where for all elements $a$, the (*) operation satisfies:

   - *closure*: $a \in G, b \in G \rightarrow a * b \in G$
   - *identity element*: $a * 1_G = 1_G * a = a$
   - *invertibility*: $a * a^{-1} = 1$.
   - *associativity*: $a * (b * c) = (a * b) * c$

   In a group, every element has its own inverse.

*** Subgroup
   $H$ is a [[https://en.wikipedia.org/wiki/Subgroup][subgroup]] of $G$ if:

   - $H \subseteq G$
   - It is closed under (*).

   The *trivial subgroup* of any group is the subgroup ${e}$ consisting of just the identity element.

*** Normal subgroup
    $H$ is a normal subgroup of $G$ iff $$\forall h \in H \wedge g \in G, ghg^{-1} \in H$$

*** Kernel of a group homomorphism
    The *kernel* $\textrm{ker}(f)$ of a group homomorphism $f: (G,\star)
    \rightarrow (H,*)$ is a set $K$ such that

    - $K \subseteq G$
    - $\forall k \in K, f(k) = 1_{*}$

*** Range of a group homomorphism
    The *range* $\textrm{range}(f)$ of a homomorphism  $f: (G,\star)
    \rightarrow (H,*)$ is a set $R$ such that

    - $R \subseteq H$
    - $\forall r \in R, \exists g \in G \textrm{~s.t.~} r = f(g)$

*** Coset
    Given a subgroup $(H, \star) \subseteq (G, \star)$, we define the *left coset* of $H$ as
    $$H_g = \{g \star h : h \in H\}$$

*** What is the set of cosets of a normal subgroup $H$ of $G$?

    It is a partition of $(G, \star)$ and it is a group where the operation is defined as
    $$Hg_1 \star Hg_2 = H(g_1 \star g_2)$$

*** Subgroup of an abelian group
    Every subgroup of an abelian group is normal.

*** Coset multiplication

    Coset multiplication operation: $$Hg_1 * Hg_2 = H(g_1 \star g_2),~~g_1,g_2 \in G$$

*** Factor/quotient group

    - If $H$ is a normal subgroup of $G$, coset multiplication is a group
      operation of a particular group: the *factor (or quotient) group*.

    - The factor group $G/H$ is a group where elements are the
      cosets of $G$ by $H$ and group operation is cosets multiplication.

*** Construct a quotient group $Z/6Z$.


    - $(G, +) = Z$
    - $(H, +) \subseteq (G,+) = 6Z$ is the subgroup of all multiples of 6 in $Z$
    - *elements* of the quotient group are all the unique cosets $$H_g = \{ 6Z + g, g \in Z \}$$
      (their elements are infinite, but there are only 6 of them, $H_1=H_7=\ldots$).
    - the *operation* among cosets $$Hg_1 + Hg_2 = H_{g_1 + g_2}$$  respects
      the quotient group properties.

    This quotient group is also called *the cyclic group $Z_6$*.

*** Fundamental homomorphism theorem

    - Given a quotient group $G/H$, there is a homomorphism $\mu: G \rightarrow
      G/H$. This homomoprhism is called 'natural' and corresponds to assigning
      to each $g$ its coset $H_g$.

    - Given any homomorphism $\phi: G \rightarrow Q$, the following sequence is
      exact: $$ 1 \rightarrow N \rightarrow^{\iota} G \rightarrow^{\phi} [Q \cong G/N]
      \rightarrow 1 $$ where $N$ is normal.

*** How many elements has each coset of $H$ (a subgroup of $G$)?

    All cosets of $H$ have *the same amount* of elements of $H$

*** What is the size of a group $G$ with respect to the size of the cosets of its subgroup $H$?

    The size of $G$ is a multiple of the size of $H$ (and in turn, also of the size of its cosets).

*** Semigroup

    A [[https://en.wikipedia.org/wiki/Semigroup][semigroup]] $S$ is a "group without inverse".

   - *closure*: $a \in G, b \in G \rightarrow a * b \in G$
   - *identity element*: $a * 1_G = 1_G * a = a$
   - *associativity*: $(a * b) * c = a * (b * c),~~a,b,c \in G$.


*** Group identity and inverse properties

    Both the identity and the inverse of every element are *unique*.

*** Endomorphism ring of an abelian group

    Given a group $(G,+,0_G)$, we can define a set
    \[
      End(G) = \{ f: G \rightarrow G | f(a + b) = f(a) + f(b) \}
    \]

    The set $End(G)$ can be made into a *ring* with the following
    operations/properties

    - sum: $(f ++ g)(x) = f(x) + g(x)$
    - sum unit: $f = x \mapsto 0$
    - sum inverse: $f^{-1}x = (f x)^{-1}$
    - multiplication: $(f \circ g)(x) = f(g(x))$
    - multiplication unit: $f = x \mapsto x$

*** Order of a group element
    In a group, the least integer $n$ such that $a^n=1_{*}$, then that element
    has order $n$.

*** Cyclic group
    If $G$ has an element $a$ and all its elements are powers of $a$, then $G$ is cyclic:
    $$G = \{ a^n : n \in Z \}$$

    $a$ is called generator and the group order is the order of $a$.

*** Symmetric group
    The symmetric group $S_n$ is the group of all permutations (symmetries) of $\{1, . . . , n\}$

*** Group action

     - A group action $\phi$ of group $G$ on a set $X$ is a function
       $$*: G \times X \rightarrow X$$ satisfying the following properties:

       - identity: $e * x = x$
       - compatibility: $(gh) * x = g * (h * x)$

     - An action $g * x$ is the same as a group homomorphism $G \rightarrow \textrm{Aut}(X)$

*** Commutator subgroup

   - A commutator subgroup $[G,G]$ is an abelian group that can be built from a
     finite group $G$.

   - It is composed of the set of elements $$[G,G] = \{ xyx^{-1}y^{-1}, x~y \in G \}$$

   - It is a normal subgroup

*** Commutator subgroup of $S_n$

    The commutator subgroup of $S_n$ is the alternating group $A_n$. It
    is the set of all even permutations in $S_n$. Even = even number of
    transpositions in which it can be written.

*** Subgroup index

    The index of a subgroup H in G is defined as the number of cosets of H in G.

*** Group stabilizer 
    - Given a group $G$, a set $S$ and an action $\curvearrowright: G \times S \rightarrow
      S$, a *stabilizer* of $s \in S$ is an element $g_s \in G$ such that $$ s \curvearrowright^{g_s} = s$$
    - The set $Stab(s) = \{ g_s \}$ is a sub-group of $G$ (isotropy group).

*** Group orbit
    - Given a group $G$, a set $S$ and an action $\curvearrowright: G \times S
      \rightarrow S$ the *group orbit* of each element $s$ is $$Orb(s) = \{ s
      \curvearrowright^g: \forall g \}$$ where $Orb(s) \subset S$.

    - $Orb(s)$ forms a group which is isomorphic to $G/Stab(s)$.

*** Orbit-stabilizer theorem
    $$|Orb(s)| = [ G : Stab(s) ]$$


*** Group centralizer
    The centralizer of an element $a$ of a group $G$ is the set of elements of
    $G$ that commute with $a$: $$C_G(a) = \{ g \vert ga = ag \}$$

*** Group conjugacy classes
    - Two elements $x, y$ of a group $G$ are conjugate-wise equivalent if $$\exists g. y=gxg^{-1}$$
    - The conjugacy class of an element $x \in G$ is the set of elements:
      $$Cl(x) = \{ gxg^{-1}: g \in G \}$$

    - The class number of G is the number of distinct (nonequivalent) conjugacy classes
** Group representations
*** Linear group representation

    - A *linear group representation* of $G$ is a group homomorphism
      $$\rho : G \rightarrow Aut(V)$$

    - It represents the elements of $G$ as *symmetries of the vector space* $V$.

    - By choosing a basis in $V$, $Aut(V) \simeq GL(V)$.

*** Properties of a linear group representation

    - $\rho_g \rho_h = \rho_{gh}$
    - $\rho_1 = Id$
    - $(\rho_g)^{-1} = \rho_{g^{-1}}$
    - $\rho_g(xv + yw) = x\rho_gv + y\rho_gw$

*** Permutation representation
     - The *permutation representation* is associated with a symmetric group $G =
       S_n$ and acts on a $V_k = k^n$.

     - Assume $v \in V_k = \sum_j a_j e_j$ with e_j basis. A permutation
       representation $\rho_{\pi}: S_n \rightarrow GL(k^n)$ is such that $\rho_s
       v = \sum a_j e_{s(j)}$.

     - Practically speaking, gives a permutation matrix for each $g \in G$.

*** Character of a representation

    The *character* of a representation $\rho$ is the trace of the corresponding
    matrix: $\chi_{\rho_g} = Tr(\rho_g)$. Frobenius showed there is finitely
    many irreducible representations of G and that they are completely
    determined by their characters.

    The character is a central or class function, it depends only on the
    conjugacy class of $g$

*** Properties of the character of a representation

    - $\chi_{\rho}(1) = dim(\rho)$
    - $\chi_{\rho \oplus \sigma} = \chi_{\rho} + \chi_{\sigma}$
    - $\chi_{\rho \otimes \sigma} = \chi_{\rho} * \chi_{\sigma}$
    - $\chi_{\rho^*}(g) = \chi_{\rho}(g^{-1})$

    If $k=C$, $\chi_{\rho}(g)=\bar{\chi}_{\rho}(g^{-1})$

*** Conjugacy classes and irreducible representations
    - The number of isomorphism classes of irreducible representations of G
      equals the number of conjugacy classes of G.
    - The size of these representations is given by the Maschke's sum of squares

*** Orthogonality relations
    Given the space of functions $F = \{ f: G \rightarrow k \}$, define the
    averaging operator $$(f_1,f_2) = \frac{1}{|G|}\sum_G f_1(g^{-1})f_2(g)$$

    - Assume $(\rho, V)$ and $(\sigma, W)$ be irreducible representations of a
      group. If they are not isomorphic then $(\chi_{\rho},\chi_{\sigma}) = 0$.
      If they are equivalent then $(\chi_{\rho},\chi_{\sigma}) = 1$

    - $dim(V^G) = (\chi_{\rho}, \chi_{triv})$
*** Sign representation
    Given any representation of the permutation group $\rho(S_n)$,
    $\textrm{det}(\rho(S_n))$ is the corresponding sign representation as well
    and it is either 1 or -1.

*** Faithful representation

    A *faithful* representation $\rho$ is an *injective* map, i.e., different $g$
    are represented by distinct $\rho(g)$.

*** Unitary representations

    - Assume $V$ is a space equipped with a hermitian dot product (on $C_2$)
      that measures the distance between vectors (i.e., an Hilbert space).

    - $(\rho,V)$ is unitary (or, a unitary operator) if it preserves the
      distance of vectors ($\langle\rho(g)v,\rho(g)w\rangle = \langle v,w
      \rangle$).

    - If the group is finite, then one can always build an unitary operator.

    - See [[[https://en.wikipedia.org/wiki/Unitary_representation#Complete_reducibility][complete reducibility of unitary representations]]].

*** Trivial representation

    - A representation $\rho: G \rightarrow GL(E_k)$ is trivial if all $g \in G$
      map to an identity matrix.

*** Invariant representation
     A representation $\rho(g)$ is *invariant* if $\forall v \in V \rho(g)v \subseteq V$

*** Intertwining operator

  - An intertwining operator is a functor $\Phi_{ij}: E_i \rightarrow E_j$ that
    preserves representations: $$\Phi_{ij}(\rho_i(g)v)=\rho_j(g)\Phi_{ij}(v)$$.

  - As such, it introduces a homomorphism between representations $$\rho_2
    = \Phi_{12} \rho_1$$ which comply with composition.

  - We can thus say that any group $G$ defines a *category of representations* and
    we can speak of its morphisms (intertwiner) as $Hom_G(\rho_1, \rho_2)$.

*** Equivalence of representations

  $\rho_1, \rho_2$ are equivalent if there exists an intertwining operator $L$
  that has an inverse and such that $$L \circ \rho_1 = \rho_2 \circ L$$.

*** Subrepresentations
   Given a subspace $F \subseteq E$, if $$\forall f \in F, ~~\rho(G)(f) \in
     F$$ then $(\rho, F)$ is a *subrepresentation* of $(\rho, E)$.

   If a group has a subrepresentation $F \subseteq E$ then also $E/F$ is a
   representation.

*** Trivial subrepresentation

   - A trivial subrepresentation $(\rho, E)$ is such that $\rho(g)e = e$.

   - in fact, $E^G$ is isomorphic to $Hom_G(1,E)$, i.e., the space of constant functions
     over $E$.

*** Irreducible representation

    An *irreducible* representation $(\rho,V)$ has as subrepresentations only
    $(\rho,0)$ and $(\rho,V)$

*** Maschke's theorem
    Given two representations of group $G$: $(\rho,V), (\rho, W), W \subset V$ we have
    $$|G| \nmid char(k) \leftrightarrow \exists W'. V = W \oplus W'$$

*** Maschke's sum of squares

    If $V = \bigoplus V_i$ and all $V_i$ are irreducible representations of $G$,
    then $$|G| = \sum_i dim(V_i)^2$$.

*** Full reducibility

    If $V = W_1 \oplus \ldots W_n$ and all $(\rho, W_i)$ are irreducible then
    $(\rho, V)$ is fully reducible.

*** Representations of Abelian groups

    - For an abelian group, it is possible to choose a basis to make $\rho(g)$ diagonal.

    - For G finite, matrices are going to be block diagonal.

*** One dimensional representation

  - A one-dimensional $k$ representation is built above a homomorphism $\chi: G
    \rightarrow k^{\times}$ and corresponds to a representation $\rho_k(g) =
    \chi(g)Id_{V}$ ($\chi(\cdot)$ is in fact a scalar).

  - The set $\hat{G}$ of one-dimensional representations of a group $G$ is an
    abelian group and it is isomorphic to $G/G'$ where $G'$ is the
    commutator subgroup.

*** Representations of external direct sums

   - An external direct sum $V \oplus V'$ is the set of pairs that can be built

   - $\rho_{\oplus}(g)(v,v') = (\rho(g)v, \rho'(g)v')$

   - Practically, if we concatenate $v,v'$ in a single vector, $\rho_{\oplus}$
     is a diagonal block matrix of $\rho, \rho'$.

*** Representations of dual spaces

    Given $(\rho,V)$, one can define a representation of its dual vector space
    $(\rho^*, V^*)$ such that $$ \rho^*(g) \vec{f} = v \mapsto f (\rho^{-1}(g) \cdot v)$$.

*** Representation of quotient spaces

    Assume $\mu: E \rightarrow E/W$ the canonical map of $E$ into its quotient
    vector space. Given a representation $(\rho, E)$, we can define
    $(\rho_{E/W}, E/W)$ such that $$\rho_{E/W}(g)q = \rho(g)v' \wedge \mu v' = q, q \in E/W$$.

*** Kernel representations
    
    - Given a homomorphism $\mu$ between spaces $E_1 \rightarrow E_2$, the
      representation $E_1/Ker(\mu)$ is isomorphic to $\Im(\mu)$

*** Representation of a tensor product space

    Given $(\rho, V)$ and $(\rho', V')$, one can define
    $$(\rho_{\otimes},V \otimes V') = \rho v \otimes \rho' v'$$

    If input repr. are one-dimensional, tensoring becomes multiplication.

*** Representation of $Hom$ spaces

    Given $Hom_C(V, V') = \{ f: V \rightarrow V' \}$ linear, one can define
    a representation from representations of $V$ and $V'$:

    $$\rho_{Hom} f = \rho' \circ f \circ \rho^{-1}$$

*** Representation of conjugate vector spaces
    Given $(\rho,V)$, $\rho$ is a representation of the
    conjugate vector space $\bar{V}$ as well.

    A conjugate representation $(\rho, \bar{V})$ is *equivalent* to $(\rho, V)$
    and to its dual representation $(\rho^*, V^*)$.

*** Regular representation of $G$

    A group algebra $K[G]$ is a vector space of elements $\phi$ that can be written as
    $$\phi: \phi(g_1)g_1 + \phi(g_2)g_2 + \ldots$$ i.e., $$K[G]=span\{g_1, g_2,
    \ldots \}$$ The regular representation $(\rho_{K}, K[G])$ is such that
    $$\rho_{K}(s)\phi = \rho_{K}(s) \phi(g_1)g_1 + \ldots = \phi(g_1)(s*g_1) +
    \ldots$$

*** Regular representation of $G$ through Cayley

    - By Caley, there is an isomorphism $\rho_C: G \rightarrow S_n$ for a group
      $G$ of order $n$ that is given by picking a permutation $\lambda x.gx$.

    - A regular representation is just the concatenation of a permutation
      representation and the cayley isomorphism: $$\rho = \rho_{\pi} \circ
      \rho_{C}$$ In practice, it associates a permutation to each $g \in G$.

    - For example, the regular representation of a cyclic group of order $n$
      ($\{1,x,x^2,\ldots, x^n\}$) associates to each element the power of a
      cyclic permutation matrix $P$.

*** Representation of function space over $G$

    A function space $F(G) = \{ \phi: G \rightarrow K \}$ can be seen as composed
    of members of the group algebra (similarly to the Z-transform): $$\phi:
    \phi(g_1)g_1 + \phi(g_2)g_2 + \ldots$$ i.e., $$K[G]=span\{g_1, g_2, \ldots
    \}$$ thus one can define a representation that is equivalent to the group
    algebra's one.

*** Schur's lemma
     - If $(\rho, V)$ and $(\rho', V)$ are irreducible representations and there
       is an intertwining operator $L$, *then* $$L \neq 0 \rightarrow L
       \textrm{~is an equivalence}$$ (no middle ground).
*** Schur's lemma - corollary for $L : V \rightarrow V$
     For irreducible representations ($\rho,V$) all intertwining operators $L: V
     \rightarrow V$ have the form $L=\lambda I$ where $\lambda$ is a scalar. In
     fact, $\lambda$ is the root of the characteristic polynomial (an
     eigenvalue) of $\phi$.
*** Schur's lemma - corollary for $L_1, L_2$ intertwining operators
     For irreducible representations ($\rho, V$) and ($\rho', V'$) all the intertwining
     operators have the form $L_1 = \lambda L_2$.
*** Irreducible representations of abelian groups
    - All irreducible representations $(\rho, V)$ of an abelian group are such that
      $dim(V)=1$ (by Schur's lemma), i.e., they are one dimensional.
    - To each $\rho(g)$ it corresponds a scalar $\lambda_g$, which is called *character*.
    - If $\rho$ is not irreducible, then there exists a basis such that
      $\rho(g)$ is diagonal.
* Algebraic structures with two operators
** Semirings
*** Semiring (Rig)
    A [[https://en.wikipedia.org/wiki/Semiring][semiring]] $R$ consists of a set $R$ such that:

    - $(R, +)$ is a commutative monoid with identity = 0 (note, *not a group*, it
      should not have an inverse).
    - $(R, *)$ is a monoid with identity = 1
    - multiplication distributes over addition
    - multiplication by 0 gives 0 (annihilates).

** Rings
*** Ring

    A [[https://en.wikipedia.org/wiki/Ring_(mathematics)][ring]] $R$ consists of a set $R$ such that:

    - $(R, +)$ is a *commutative* *group* with identity=0 (note that it should have
      an inverse, so we can talk about *negative* values).
    - $(R, *)$ is a monoid with identity = 1 (Semigroup)
    - multiplication distributes over addition
    - multiplication by 0 gives 0 (annihilates).

*** Commutative ring

   A commutative ring $R$ is commutative if $(R, *)$ is commutative.

*** Ring divisor of zero
    - $a \neq 0$ is called divisor of zero if there is $b \neq 0$ such that $ab = 0$

    - Z,Q,R and C do not have divisors of zero. This means that, if the product
      of two numbers is zero, then one of them should be zero.

*** Ring cancellation property

    - A ring has cancellation property if and only if it doesn't have divisors
      of zero. Equationally: $$ ab = ac
      \rightarrow b = c $$

*** Integral domain
    - It is a commutative ring (with multiplication commutative) that has the
      cancellation property.

    - An integral domain with non-zero characteristic $p$ is such that $p$ is prime.

*** Integral domains and fields

    - Every field is an integral domain.

    - Every *finite* integral domain is a field, because you can find a
      multiplicative inverse for each element of the field (this depends on the
      fact that there are no zero divisors).

    - A *finite integral domain* is just a *finite field*

*** Quaternions

    - Quaternions are a subring of 2x2 matrices with unity.

    - Each quaternion $\alpha$ has a multiplicative inverse $(1/t)\bar{\alpha}$,
      where $\bar{\alpha}$ is its conjugate and $t$ is its norm.

*** Subring

    If $S \subseteq R$ ($R$ is a ring) and $S$ is closed under sum, difference
    and multiplication of $R$, then it is a subring of $R$.

*** Ideals
    A subring $I$ of $R$ if

    - it absorbs elements of $R$ by multiplication: $$\forall s \in I, \forall r
      \in R. sr \in I$$
    - it is closed under addition.

    For example, even integers (but not the odd) are an ideal of $Z$.



*** Principal ideal

    A /principal ideal/ can be generated by taking an element $s$ of a commutative
    ring $R$ and computing the set $$ \langle s \rangle = \{ s * r: r \in R \}$$

    It can be shown that it respects the ideal properties (closed under addition
    and difference and absorbs multiplication).

    Every ideal in $Z$ is principal, but there are cases where an ideal is not principal.


*** Ring homomorphism

    If $R$ and $S$ are rings, a ring homomorphism $f: R \rightarrow S$ is a
    total function such that:

    - $f(a + b) = f(a) + f(b)$
    - $f(a * b) = f(a) * f(b)$
    - $f(1_R) = 1_S$

*** Kernel of a ring homomorphism
    The kernel of a ring homomorphism $f: R_0 \rightarrow R_1$ is a subring
    $$I_R = \{ k \in R | f(k) = 0$$ which is ideal, because $f(a*k) = f(a)*f(k)$
    so if $k \in R$ then also $a*k \in R$. 
*** Cosets of an ideal of a ring

    A coset of an ideal $I_a$, just as those of subgroups, is created with the
    addition operation as in group theory: $$I_a = \{ a + i | i \in I\} a \in
    R$$ We can define both addition and multiplication:

    - $I_a + I_b = I_{a + b}$
    - $I_a * I_b = I_{a * b}$

*** Ring center

    The center of a ring $R$ is the subring $Z(R)$ of the elements $z$ such that $$zy
    = yz$$ for all elements $y$ in R.

*** Quotient ring

    Given a ring $R$ and an ideal $I$, the set of cosets of $I$ is a ring and
    it is called the quotient ring $R/I$.

*** Division ring
    - A ring where every nonzero element a has a multiplicative inverse.
    - Also called *skew field*, they differ from fields because multiplication is
      not required to be commutative.
*** Integral system
    - An integral domain $A$ that is *ordered* and for which every subset $B \subseteq
      A$ has a *least element* (initial object)
    - The above property ensures that there are no elements $c$ such that $0<c<1$.
    - Every element is a multiple of 1.
*** Integral system - mathematical induction
    If the following condition hold for a subset $K$ of an ordered integral system:
    - $1 \in K$
    - $k \in K \Rightarrow (k+1) \in K$
    then $K$ is all the integers. Proof by contradiction (see Pinter).

*** Polynomial
    - Take a ring $Z$ and add a new symbol $\pi$. Which other numbers should be
      present to make it a ring? It turns out that all the numbers of the form
      $$a_n \pi^n + \dots + a_1 \pi + a_0$$ should be present.
    - The ring created is the polynomial ring $\mathbb{Z}[x]$.

*** Ring of a polynomials over a field: ideals 
    Every ideal of a polynomial ring $\mathbb{F}$ is *principal*, i.e., ideals are
    always of the form $$\langle s(x) \rangle = \{ s(x) * f(x): f(x) \in \mathbb{F}(x) \}$$

    Any ideal $J$ is generated by its member $s(x)$ of the lowest degree.

*** Polynomial associates 
    Two polynomial $a(x)$ and $b(x)$ are associates if one divides the other and viceversa.

*** GCD of polynomials 
    The greatest common divisor of two polynomials $a(x)$ and $b(x)$ divides
    both of them and is multiple of all other divisors.

    It is always a linear combination of $a(x)$ and $b(x)$.

*** Irreducible polynomials 
    A polynomial is *reducible* if it is expressible as the product of two other
    polys. It is *irreducible* otherwise. 
    
    For example $x^2+1$ is irreducible over $\mathbb{R}$ but reducible in
    $\mathbb{C}$.

*** Factorization of polynomials 
    Every polynomial $a(x)$ of positive degree can be written *uniquely* as: $$a(x) = k
    p_1(x) \ldots p_n(x)$$ where $p_j(x)$ is a monic irreducible polynomial.

*** Eisenstein irreducibility criterion
    Given a polynomial $$a(x) = a_0 + ... + a_n x^n$$ over $\mathbb{Q}$ (or
    $\mathbb{Z}$), if a prime number $p$ divides $a_1 ... a_{n-1}$ but not $a_n$
    and $p^2$ does not divide $a_0$ then the polynomial is irreducible over $\mathbb{Q}$.
*** Fundamental theorem of algebra
    - Every nonconstant polynomial with complex coefficients has a complex root.
    - If the coefficients are in $\mathbb{R}$ and $a+bi$ is a root, then also $a-bi$ is a root.
** Fields

*** Field

    A [[https://en.wikipedia.org/wiki/Field_(mathematics)][field]] a set with two operations:

    - $(F, +)$ is a commutative group
    - $(F, *)$ is a commutative group

*** Field characteristic

    A field has characteristic $n$ if $1_{*}$ summed with it self $n$ times gives
    $0_{+}$.

    The following relation is found to hold: $$ n > 0 \leftrightarrow
    \textrm{prime}(n)$$

*** Prime field F
    A finite field of order $p$ where $p$ is prime.

*** Finite field $F_p$
    It has $p$ elements. If $p$ is prime then $F_p$ is a prime field and
    operations are understood as modular.

*** Algebraically closed field
    An algebraically closed field $F$ contains a root for every non-constant
    polynomial in $F[x]$, the ring of polynomials in the variable $x$ with
    coefficients in $F$.

*** Field extensions

    - Assume $\pi(x) \in F[x]$ irreducible. Can I build *a field extension* $F[c]$
      such that $\pi(x) \in F[c][x]$ is reducible? What structure does it pose to
      $F[c]$ and all its polynomials $p_i(c)$?
    - Assume $\sigma_c: F[c][x] \rightarrow F[c]$ substitutes $c$ into all occurrences of $x$ and
      $\pi(x)$ to 0.
    - Then
      - $\pi(c)=0 \in F[c]$ 
      - All other $p_i(c)$ can be written as remainders with respect to the
        division with $\pi(c)$. Their degree will be always less than $\pi(x)$.
      
*** Field extension $Z[x]/(x^2+x+1)$
    The polynomial $x^2 + x + 1$ does not have any root in $Z_2$. To
    build the field $Z_2[c]$, first identify the elements, i.e., $(0,1,c)$ and
    $(c+1)$ to make it closed under addition. When you build the
    multiplication table, remember to elide any addend of the type $c^2+c+1$.
*** Field extensions as vector space
    - An extension $F(c)$ can be seen as a vector space of elements of the form $$\sum^n_i f_i c^{i-1}$$
    - $n$ is the degree of the minimum polynomial of $c$ that is in $F[x]$
      (e.g., $i$ is the root of $x^2 - 1$, so n = 2). 
    - $n$ is called the *extension degree* over $F$: $$ [ F(c) : F ] = n $$
*** Multiple field extensions as vector space
    - An extension $F(c_1, c_2)$ can be seen as a vector space of elements of
      the form $$\sum^{n_1}_i \sum^{n_2}_j f_{i,j} c_1^{i-1}c_2^{j-1}$$
    - Adjoining several $c_k$ brings to a overall extension degree $n =\Pi_k n_k$.
*** Root field

Given a polynomial $a(x)$ with roots $c_1 \ldots c_n$, the field extension
$F(c_1 \ldots c_n)$ is its *root field*.

*** Field isomorphisms
:PROPERTIES:
:BEAMER_opt: fragile
:END:
There exists an isomorphism $h$ between field extensions over roots $a,b$ of the
same irreducible polynomial $p(x) \in F(x)$:

#+BEGIN_EXPORT latex
\begin{tikzcd}
F \arrow[r, hook] \arrow[rd, hook] & F(a) \arrow[d] \\
 & F(b) \arrow[u, "h"]
\end{tikzcd}
#+END_EXPORT

If the above commutes (/$h$ fixes $F$/) then $h$ is an inclusion, so $F(a) =
F(b)$. Thus there is a single root field for every irreducible polynomial, if it
contains $a$ it should contain also $b$.

* Algebras of vector spaces and modules
** Vector spaces
*** Vector space

    A pair $(V,K)$ where

    - $(K,(+,0),(\cdot,1))$ is a field
    - $(V,+,e)$ is an abelian group under addition

    Moreover, the following operation should be total (scalar multiplication)
    \[
    *: K \times V \rightarrow V
    \]

*** Simple vectors

    They are ordered sequences of elements that belong to a field ([[https://en.wikipedia.org/wiki/Scalar_(mathematics)][scalars)]].
    Classical results of geometry apply.

*** Direct sum

    The direct sum of two vector spaces is a linear combination (span) of their basis.

    $$V_1=span_k([0,1]), V_2=span_k([1,0]), V_1 \oplus V_2 = span_k([0,1],[1,0])$$

*** Normed vector spaces

    A *normed* vector space $V$ is endowed with a map $V \rightarrow R$.

*** Inner product spaces

    An *inner product* space $V$ is endowed with an operation $V \times V \rightarrow R$.

    Hermitian products are one of the possible operations

*** Dual Space

    - Given a vector space $V$, one can define its dual space as the space of
      linear mappings over it, i.e., $V^* = \{f: V \rightarrow k \}$.

    - $V^*=span(f_1^*, \ldots, f_n^*)$ where $f_i^*(v)=\delta_{v,e_j}$
      and $V = span(e_1, \ldots, e_n)$.

    - Important property of *duality*: $(V^*)^* \cong V$

    - Also called *linear functionals* from $V$ to $k$.

*** Dual spaces maps
    - Given $f: V \rightarrow W$ linear then I can build the dual $f^*: W^*
      \rightarrow V^*$. 
    - To do this, recall that $f^* (w^*)$ is a function $V \rightarrow K$, so
      being not a lot of options: $$f^*(w^*) = w^* \ocirc f$$

*** Dual spaces natural pairing

    - Given $v \in V_k$ and $v^* \in V^*$, there is a natural pairing $(v^*,v)$,
      i.e., $v^*(v)$. 

    - The *natural pairing* is a bi-linear map (in both $v$ and $v^*$).
      
*** Tensor product spaces

    Given two vector spaces $(V,V')$, I can define their tensor product $W =V
    \otimes V'$ by

    - creating monomials (concatenations) of their bases $e_i \otimes e'_j$ as
      a new basis for $W$

    - expressing the product $v \otimes v' = \sum_{c_{ij}}c_{ij} e_i \otimes e'_j$ such
      that the properties of a bilinear product hold.

*** Tensor product spaces (formal through quotients)

    Given two vector spaces $(V,V')$, I can define their tensor product $W =V
    \otimes V'$ by

    - Taking the free vector space $F = (V \times V') = span \{(u,v) | u \in U,
      v \in V\}$ (all elements become a basis!).

    - $V \otimes V' = F(V \times V') / I$ where $I$ is an ideal generated that
      makes $(a+b)\otimes c = a \otimes c + b \otimes c$ (and other constraints..).
      


*** Conjugate vector spaces

    Given a vector space on complex numbers $V_C$ then also $\bar{V}_C$, where
     scalar multiplication is $\bar{z}*v$ for $z \in C$, is a vector space.

*** $k$ -Algebra (with tensor products)

    A vector space $A$ with linear maps:

      - $m: A \otimes A \rightarrow A$ 
      - $u: K \rightarrow A$ 
     
    such that the following hold:

      - $m(a \otimes m(b \otimes c)) = m(m(a \otimes b) \otimes c)$
      - $\mu(u(1) \otimes x) = \mu(x \otimes u(1)) = x, \forall x$ (algebra is unitary)

*** $k$ -Algebra (as a ring)

    A tensor product $m: A \otimes A \rightarrow A$ makes $A$ a *ring* with
    multiplication $\cdot: A \times A \rightarrow A$, i.e. $$ a \cdot b = m(a
    \otimes b)$$ Viceversa, we can create an $m$ from a ring $A$, because
    multiplication is a bilinear map.

*** Universal property of tensor products 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
V \times W \arrow[r, "\phi"] \arrow[rd, "h"] & V \otimes W \arrow[d, "\tilde{h}"] \\
 & Z
\end{tikzcd}
#+END_EXPORT
    - Recall a bilinear map as a function that acts linearly and separately on each of its arguments.

    - All functions $\phi: V \times W \rightarrow V \otimes W$ that are
      bi-linear are isomorphic, so $\phi$ is called the universal bilinear map.

    - Any other bi-linear map $h: V \times W \rightarrow Z$ can be written as $h
      = \tilde{h} \circ \phi$ where $\tilde{h}$ is unique.

    - The tensor product is *associative* $(A \otimes B) \otimes C = A \otimes (B \otimes C)$

*** Graded $k$ algebras

    A $k$ -algebra is graded if it has a decomposition: $$ A = A_0 \oplus A_1 \oplus A_2 \cdots$$

    where $A_i$ has homogeneous elements of degree $i$ such that $a_i a_j \in A_{i+j}$

    The following formal series $$\textrm{Hilb}(A,q) = \sum_{d} \textrm{dim}(A_d)q^d$$ is 
    a formal series representing the dimensions of a graded algebra.

*** Graded algebras examples and their Hilbert series

    - for $K[x] = \bigoplus_d (K x^d)$ we have $$ \textrm{Hilb}(A,q)=\sum_d
      q^d$$

    - for $B[x_1 ... x_n] = \bigoplus_d B_d$ where $$B_d=K[x_1^{a_1} ...
      x_n^{a_n}, a_1 + ... + a_n = d]$$ we have $$\textrm{Hilb}(B,q)=\sum_d
      {n+d-1 \choose d}q^d=(1-q)^{-n}$$

    # RESTART FROM HERE: https://www.youtube.com/watch?v=PPexiDR4r0Y


*** Tensor algebra
    A tensor algebra is a graded algebra $$TV = \bigoplus_d V^{\otimes d}$$
*** Symmetric algebra
    A symmetric algebra is a quotient algebra: $$SV = TV/(v\otimes w - w \otimes v)$$
    The ideal is homogeneous so the resulting quotient is graded.
*** An exterior algebra 
    An exterior algebra is a quotient algebra: $$\Lambda V = TV/(v\otimes v)$$
    The ideal is homogeneous so the resulting quotient is graded.
*** $k$ -Coalgebra 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

      It is a vector space $A$ with linear maps:

      - $\Delta: C \rightarrow C \otimes C$ 
      - $\epsilon: C \rightarrow k$ 
     
      such that coassociativiy diagrams for $\Delta$ commute (same diagrams as
      $k$ -algebra but reversed):

#+BEGIN_EXPORT latex
\begin{tikzcd}
C \arrow[r, "\Delta"] \arrow[d, "\Delta"] & C \otimes C \arrow[d, "id \otimes \Delta"] \\
C \otimes C \arrow[r, "\Delta \otimes id"] & C \otimes C \otimes C
\end{tikzcd}
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{tikzcd}
 & C \arrow[d, "\Delta"] \arrow[ld] \arrow[rd] &  \\
\mathbb{F} \otimes C & C \otimes C \arrow[l, "\epsilon \otimes id"] \arrow[r, "id \otimes \epsilon"] & C \otimes \mathbb{F}
\end{tikzcd}
#+END_EXPORT

*** Examples of co-algebra

      An example is the free vector space generated by a set $S$, i.e., $k[S]$.
      Another example is the algebra of intervals of a poset: $K[I]$. The dual
      of an algebra intended as a vector space is a co-algebra.
      

*** How are related algebras and co-algebras      
:PROPERTIES:
:BEAMER_opt: fragile
:END:
Given a co-algebra $C$, $C^*$ is an algebra (over $k^{*}$). In fact, I can build
$u$ and $m$ such that the following diagrams commute (note that $\rho$ is an
injection):

#+BEGIN_EXPORT latex
\begin{tikzcd}
k \arrow[r, "u"] \arrow[rd, "\cong"] & C^* & C^* \otimes C^* \arrow[r, "m"] \arrow[rd, "\rho", hook] & C^* \\
 & K^* \arrow[u, "\epsilon^*"] &  & (C \otimes C)^* \arrow[u, "\Delta"]
\end{tikzcd}
#+END_EXPORT

Viceversa, if $A$ is an algebra $A^*$ is a co-algebra.

*** Affine space
    - A tuple $(A, V_k, (+): V_k \times A \rightarrow A)$ defines an /affine space/
      $A$ if $(+)$ complies with the group action properties.
    - Alternatively, it can be defined as $(A, V_k, (-): A \times A \rightarrow V_k)$ where
      $(-)$ complies with Weyl's axioms

*** Quotient space
    Given a vector space $V$ and a subspace $W$, the quotient space $V/W$ is the set of
    cosets $W_v = \{ v + w | w \in W \}$.  Fixed a $v$, the coset represents the elements $y$
    for which $\exists w \in W, x - y = w$ which is an equivalence class.

*** Exact sequence 

    In the context of group theory, a sequence of morphisms $G_0 \rightarrow^{f_0} G_1 \rightarrow^{f_1} ... G_n$ is 
    exact if the image of each moprhism is the kernel of the next.

    - The sequence 0 -> A -> B is exact only if the map from A to B is a monomorphism
    - The sequence B -> C -> 0 is exact only if the map from B to C is an epimorphism
    - The sequence 0 -> A -> B -> C -> 0 is called exact if A -> B is mono and B -> C is epi
    
*** Group Algebra as formal sum

    A group algebra $K[G]$ for a group $G$ and a field $K$ is a vector space
    that is the direct sum of copies of $K$ indexed by $G$.

    In practice, the basis $e_g$ is a vector that has a dimension $|G|$ and
    whose $g-th$ component is 1.

    Each element of the algebra is thus a formal linear combination of the
    elements of $G$ with coefficients in $K$, i.e., $$f = \sum_{g\in G}a_{g,f}
    e_g$$ where $e_g$ are basis in $K[G]$.

*** Group Algebra as function space

    Given a group $G$ and a field $K$, we can build an algebra $K[G]$ where

    - vectors are functions $f: G \rightarrow K$ for $K$ either a ring or
      field.
    - $(f_1 + f_2) = g \mapsto f_1(g) + f_2(g)$
    - $(\alpha f) = g \mapsto \alpha f(g)$
    - $(f_1 \times f_2) = g \mapsto \sum_{u \in G}f_1(u)f_2(u^{-1}g)$

*** R-Module

    Generalization of vector space. A pair $(V,K)$ where

    - $(K,(+ ,0),(\cdot,1))$ is a *ring*
    - $(V,+,e)$ is an abelian group under addition

    Moreover, the following operation should be total (scalar multiplication)
    \[
    *: K \times V \rightarrow V
    \]
*** Modules over division rings

    - Much of the linear algebra results can be applied to modules over division
      rings as the latter are almost fields.

*** Projector
    - A *projector* is a linear operator $P: X \rightarrow X$ for which $P^2=P$.

    - It is characterized by the exact sequence: $$(1-P)X \rightarrow X
      \rightarrow_P X$$ i.e., $(1-P)X$ is its kernel.

    - $P$ endows $X$ with a direct sum composition $$X \simeq X_1 \oplus X_2 =
      PX \oplus (I-P)X$$

*** Projector image
      The image of a projector $P$ is an *invariant* under $P$: $$ P(PX)=(PX) \sim Pw=w$$

*** Projector kernel
      Given a projector $P$, $X_2 = (1-P)X$ is the kernel of $P$ by definition: $$PX_2 = P(1-P)X = (P-P^2)X = 0$$

* Category theory - basics

** Category basics
*** Category

A category is a triple $\mathcal{C}(O, M, \bullet)$ that abides these laws:

- *identity*: $\forall o \in O, \exists id_o \in M$

- *composition*: '$\bullet$' composes morphisms in $M$ that share source and target :

  1. $\bullet(A \rightarrow B, B \rightarrow C) = A \rightarrow C$

  2. $(f \bullet g) \bullet h == f \bullet (h \bullet g)$

  3. $id_x \bullet f = f \bullet id_y$

*** Section
    - A section $s$ for a morphism $f$ is such that $$f \circ s = Id$$
      
    - Every section is a mono-morphism.

    - A section is always paired with a retraction: $r \circ s = Id$. $r \circ s$
      form always a pair $e \circ m$ where $e$ is epi and $m$ is mono.

*** Retraction
    - A retraction $r$ for a morphism $f$ is such that $$r \circ f = Id$$
    
    - Every retraction is an epi-morphism

    - A retraction is always paired with a section: $r \circ s = Id$. $r \circ s$
      form always a pair $e \circ m$ where $e$ is epi and $m$ is mono.

** Monoid (Category)

*** Monoid as a category
    - A monoid $\mathcal{M}(M, id_0, \star)$ is just a category $\mathcal{C}(O, M, \star)$ where O = $\{ o_1 \}$ and $id_0 = id_{o1}$.

    - The elements $M$ of a monoid are the morphisms $M$ of the corresponding
      category. As such, *associativity* holds.

*** Free Monoid
:PROPERTIES:
:placement: 18,0
:END:

- A free monoid of M is just a monoid $\mathcal{M}(List[G], [], ++)$

- It has a free generator set G and all its elements are uniquely determined by
  a fold of elements in $G$.

*** Action

An action of a $\mathcal{M}(M, id_0, \star)$ over a set $S$ of states is a
function  \[ \alpha: M \times S \rightarrow S \]. The following properties should be satisfied:

- identity: $\alpha(id_0, s) = s$

- compatibility: $\alpha(f \star g, s) = \alpha(f, \alpha(g, s))$

** Preorder, partial and linear order (Category)

*** Preorder as a category

A *preorder* is a category $\mathcal{C}(O, M, \bullet)$, where there is at most one
morphism between objects. It has the following properties:

- *reflexivity*: from identity morphisms

- *transitivity*: from composition of morphisms

*** Partial order as a category

A *partial order* (*poset*) is a preorder where there cannot be loops except for
identity arrows.

- *reflexivity*: from identity morphisms

- *transitivity*: from composition of morphisms

- *antisimmetry*: $x \rightarrow y \rightarrow x \Rightarrow x = y$

Given a poset $P$, one can define an interval $I_{x,y}=\{ i: x \leq i \leq y \},
x,y,i \in P$

*** Linear order as a category

- A Linear order is a partial order where:

  \[x \rightarrow y \in M \Rightarrow y \rightarrow x \notin M\]

- Basically, either one or the other but all objects pairs have morphisms

*** Meet

A *meet*

- is the unique *product* of two objects in a poset

- it is regarded as the *minimum* of two objects

- in boolean algebra, it can be seen as the *and* operation

*** Join

A *join*

- is the unique *coproduct* of two objects in a poset

- it is regarded as the maximum of two objects

- in boolean algebra, it can be seen as the *or* operation

*** Lattice as a category

[[https://ncatlab.org/nlab/show/lattice][A lattice]] is a poset where *all objects* have a *meet* and a *join*

** Special categories
*** Categorical nomenclature (*small* and *large* cats)

    - A *class* is a collection of sets that share a property.

    - Large category $C$: Either $ob(C)$ or both $ob(C)$ and $hom(C)$ are proper
      classes (i.e., a class that is not a set).

    - Locally small category $C$: $hom(C)$ is a set (*Set* is just an example)

    - Small category $C$: $ob(C)$ and $hom(C)$ are sets

*** Groupoid

 A (small) *groupoid* is a (small) category in which all morphisms are
 *isomorphisms*. I.e., composition has a *two sided inverse*.

*** Big category

 A category of categories ($CAT$) that:

 - has functors as morphisms
 - excludes itself.

*** Product category

Given two categories $C$ and $D$, a product category $C \times D$ is such that

- Objects are all possible pairs of original objects

- Morphisms are all the corresponding morphisms

*** Cartesian category

It is a category where a product is defined for all objects. This product is a
bifunctor $C \times C \rightarrow C$. It is a superset of monoidal categories,
where also initial objects should be defined.

*** Cartesian closed category
It is a cartesian category that has exponentials and a terminal object.

*** BiCartesian closed category
It is a cartesian category that has exponentials and a terminal object and coproducts.

*** Monoidal category definition
   - A category $C$ is *monoidal* if *all* pairs of objects have a product
     (co-product) and a terminal (initial) object.

   - Both product and coproduct in a monoidal category are individuated by the
     same symbol, i.e., *tensor product* ($\otimes$)

*** Monoidal category of endofunctors 
    Endofunctors and natural transformations form a category. If there are
    additional natural transformations of the type $T\times T \rightarrow T$ then
    this category is a monoidal category. These monoids are called monad.

** Set category
*** Monomorphisms (Sets)
- $f$ is a monomorphism if $$\neg\exists (g_1, g_2) ~~ g_1 \neq g_2 \wedge f \circ g_1 = f \circ g_2$$

- Injective functions among sets can be classified as /monomorphisms/;

- *Assume* three sets $A,B$ and $C$ and $f: A \rightarrow B$, and $g_1, g_2 : C \rightarrow A$.
  If $f$ is non-injective, then the pre-composition with g_1 and g_2 (where g_1 and g_2
  differ only because they map the same element $z \in C$ into two different $a_1,
  a_2$ for which $f(a_1) = f(a_2)$) will be the same: $$f \circ g_1 = f \circ g_2$$ even if those are different.

*** Epimorphisms (Sets)

- $f$ is an epimorphism if $$\neg\exists (g_1, g_2) ~~ g_1 \neq g_2 \wedge g_1 \circ f = g_2
  \circ f$$.

- Surjective functions among sets can be classified as /epimorphisms/;

- *Assume* three sets $A,B$ and $C$ and $f: A \rightarrow B$, and $g_1, g_2: B \rightarrow C$.
  If $f$ is not surjective, there are elements in $B$ which will not participate
  to $g \circ f$ (/terra incognita/). There will be thus $g_1$ and $g_2$ that differ only in
  terms of those excluded terms while their composition is the same.

*** Terminal object (Sets)

There is a set 1 for which, for any set $X$, there is a unique function $X \rightarrow 1$.
This is called the *terminal object*.

*** Unit of categorical product (Sets)

The unit of a categorical product is the terminal object, $X \times 1 \simeq X$

*** Sets sharing an element (Sets)

If:

- there is a monomorphism $m: B \rightarrow X$

- and there is $k: 1 \rightarrow B$ such that $x: 1 \rightarrow X$ factors through $m$, i.e.,  $x = m \circ k$

then $x \in B$

*** Subobject (Sets)

Any object $B$ for which there exists a monomorphism $B \rightarrow X$ is a subset/subobject of $X$.

*** Equalizer (Sets)

Given two functions ($g_1, g_2: X \rightarrow Y$), an equaliser is an *object* and
*monomorphism* *pair* $(E,m: E \rightarrow X)$ for which the following
properties hold:

1. *Equivalence*: $g_1 \circ m = g_2 \circ m$
2. *Limit*: for any other object pair $(O,m_o: O \rightarrow X)$ where $g_1 \circ
   m_o = g_2 \circ m_o$, there exists a unique morphism $f: O \rightarrow E$ such
   that $m_o = m \circ f$

$E$ should be understood as the subset of elements of $X$ for which $g_1(x) =
g_2(x)$, i.e., the solutions of the equation.

*** Function objects (Sets)
    An object $b^a$ is an *exponential object* if
      - there exists a morphism $eval: b^a \times a \rightarrow b$
      - for all other objects $f$ for which there exists a morphism $e: f \times
        a \rightarrow b$ there is a unique morphism $(h \times Id): f \times a
        \rightarrow b^a \times a$ that makes $eval \circ (h \times Id) = e$
      - the one to one correspondence between any moprhism $e: f \times a \rightarrow b$ and $h: f \rightarrow b^a$ 
        is called *currying*.
** Special objects
*** Initial object (representability)
    - Assume $C$ a locally small category, then $d^{(-)}: C \rightarrow Set$ is a functor.
    - If $d^{(-)}$ is naturally isomorphic to the constant functor $$*: C
      \rightarrow Set = o \mapsto \{ \cdot \}$$ then $d$ is *initial*.
*** Terminal object (representability)
    - Assume $C$ a locally small category, then $d^{(-)}: C \rightarrow Set$ is
      a contravariant functor.
    - If $d^({-})$ is naturally isomorphic to the constant functor $$*: C^{op}
      \rightarrow Set$$ that sends every object to the singleton set, then $d$ is
      *terminal*.

** Kleisly category and monads
*** Kleisly category ($C_T$) definition
    - Assume $C$ is a category with an endofunctor $T$ and a morphism $\mu: T^2 C \rightarrow C$
    - $C_T$ has the same object as $C$ but any morphism $A \rightarrow_T B$ is
      built by picking a morphism $A \rightarrow T B$ in the following way:
      - The *identity* for any $A$ is constructed by picking a morphism $\eta_A: A
        \rightarrow T A$
      - The composed arrow $h_T = f_T \circ g_T : A \rightarrow_T C$ is the
        the one built as $h: A \rightarrow T C$ such that $$ h = \mu
        \circ T f \circ g$$
      - Note that $T f: T B \rightarrow T^2 C$
    - The relationship between $C$ and $C_T$ is an example of /adjunction/
*** Monads 
    Given a category $C$, A monad corresponds to the data of:
    - an endofunctor $T: C \rightarrow C$
    - a unit natural transformation $\eta: 1_C \Rightarrow T$ (where $1_C$ is the identity endofunctor)
    - a multiplication natural transformation $\mu: T^2 \Rightarrow T$ 
    so that, seeing the endofunctors as objects in the monoidal category of
    endofunctors $C^C$, the unit and the multiplication can be used to make $T$
    a monoid.

*** Monad laws (left identity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[A]} \arrow[d, "f^o"] & A \arrow[l, "r"] \arrow[ld, "f"] \\
        {T[B]} & 
        \end{tikzcd}
        #+END_EXPORT

     $f^o$ is the bound function. It should commute with the return of the monad.

*** Monad laws (right identity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:


        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[A]} \arrow[d, "r^o"] \arrow[d, "id"', bend right] & A \arrow[l, "r"] \arrow[ld, "r"] \\
        {T[A]} & 
        \end{tikzcd}
        #+END_EXPORT
     
    Bound return equals identity.

*** Monad laws (associativity)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

        
        #+BEGIN_EXPORT latex
        \begin{tikzcd}
        {T[M]} \arrow[d, "f^o"] & M \arrow[ld, "f"] \\
        {T[M']} \arrow[d, "g^o"] & M' \arrow[ld, "g"] \\
        {T[M'']} & 
        \end{tikzcd}
        #+END_EXPORT

     $g^o \circ f^o = (g^o \circ f)^o$

*** Free monads (construction)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
{[-]+T[\tilde{T}[-]]} \arrow[r] \arrow[d, "{[p,f]}"] & {[-]+T[-]} \arrow[d,"{[p,f]}"] \\
{\tilde{T}[-]} \arrow[r] & {[-]}
\end{tikzcd}
#+END_EXPORT

 - Given a functor $T[-]$, the *free monad* $\tilde{T}$ can be built as the fixed
   point of functor $[-]+T[-]$.
 - The algebra of the functor is composed by the two constructor (p=pure, f=free) which
   are natural transformation. 
 - It is possible to show that $\tilde{T}$ is a functor and *a monad*.

*** Free monads (interpretation)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
T \arrow[r, Rightarrow, "\phi"] \arrow[d, Rightarrow, "\textrm{liftF}"'] & M \\
\tilde{T} \arrow[ru, Rightarrow, "\textrm{run}"'] & 
\end{tikzcd}
#+END_EXPORT
- A value can be built into the free monad $\tilde{T}[ ]$ 
  with monad syntax and interpreted with a custom ~run~ into a monad $M$.
- Some authors derive ~run~ from a natural transformation $\phi$.
- Commands in the free monad are constructors in $T$ lifted with $liftF$.

*** Free monads (composition)
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
    
#+BEGIN_EXPORT latex
\begin{tikzcd}
T \arrow[rr, "InL"] \arrow[d] &  * \arrow[d, "freeM"] & (T+G) \arrow[d] &  & G \arrow[ll, "InR"'] \arrow[d] \\
\tilde{T} \arrow[rr] &  * & \tilde{T+G} &  & \tilde{G} \arrow[ll]
\end{tikzcd}
#+END_EXPORT

-   Given two functors $T$ and $G$, one can build a free monad of $(T+G)$ by
    lifting with $freeM$ the injection morphisms.

*** Suspended computation and continuation monads
    - A function ~(a -> r) -> r~ is called a suspended computation (SC). It needs a way
      to transform its intermediate value ~a~ into its final result ~r~.
    - Such a way is provided by means of a continuation ~a -> r~.
    - SCs form an endofunctor $Hom(Hom(-,R),R)$; this endofunctor can be made
      into a monad where a new ~SC b~ can be built from an ~SC a~ by specifying ~a ->
      SC b~ (bind).
** Functors
*** Functor definition

A functor \[ F : \mathcal{C} \rightarrow \mathcal{C'} \] is a pair $(F_o, F_m)$ where

- $F_o$ maps objects across categories $\mathcal{C}$ and $\mathcal{C'}$, while

- $F_m$ maps morphisms with laws $F(id_o) = id_F(o)$ and $F(h \bullet g) = F(h) \bullet F(g)$

- It preserves composition and identity

*** Full functor

A *full functor* $T: C \rightarrow D$ is an *epimorphism* between morphisms in $C$ and $D$.

*** Faithful functor

A faithful functor $T: C \rightarrow D$ is a *monomorphism* between morphisms in $C$ and $D$.

*** Identity functor
    $Id: C \rightarrow C$ is a functor that maps an object to itself and a
    function to itself.

*** Constant $\Delta_c$ functor
    A constant functor $\Delta_c: B \rightarrow C$ is a functor that maps every
    object in $B$ into a single object $c \in C$ and every morphism into the
    identity map on $c$.

*** Bifunctors

- A bifunctor over $C$ and $D$ is a functor over pairs of objects and morphisms,
  i.e., $C \times D \rightarrow E$

- Products and co-products are special bifunctors $C \times C \rightarrow C$

*** Contravariant functors

    - A contravariant functor is a functor $C^{op} \rightarrow D$. It basically
      maps inverse arrows in $C$ to $D$.

    - An example is the functor $A^{(-)}$ which takes an object to a morphism
      starting from that object. 

*** Profunctors

    A pro-functor is a functor $D^{op} \times C \rightarrow Set$. 

*** Combination of functors

    - $T(X) = X = Id$ is a functor

    - $T(X) = A = \Delta_A$ is a functor

    - If $F_1(X)$ and $F_2(X)$ are functors then $T(X) = F_1(X) + F_2(X)$ is a
      functor
    - If $F_1(X)$ and $F_2(X)$ are functors then $T(X) = F_1(X) * F_2(X)$ is a functor

    - If $F_1(X)$ is a functor then $T(X) = F_1(X)^A$ is a functor


    Thus any polynomial expression in an object $X$ can be made into a functor.

*** Curry-Howard-Lambek isomorphism


    | *Logic*          | $\top$   | $\bot$  | $a \wedge b$ | $a \vee b$ | $a \Rightarrow b$ |
    | *Types*          | ()       | Void    | (a,b)        | Either a b | $a \rightarrow b$ |
    | *C. C. Category* | terminal | initial | $a \times b$ | $a + b$    | $b^a$             |

    - Proving a logic predicate means constructing an element of a specific type

    - A cartesian closed category is a model for logic and category theory
*** Natural transformation of functors $F \rightarrow G$

    It is a way of comparing functors; given two functors $F,G: C \rightarrow D$, I
    can create compare them by :
    - picking to objects object $c_1,c_2$ and a morphism $f: c_1 \rightarrow c_2$
    - picking in $D$ a morphism $\alpha_{c_1}$ in $D$ that maps $Fc_1$ to $Gc_1$
      (the family of $\alpha_c$ is called *components of the NT*).
    - picking in $D$ a morphism $\alpha_{c_2}$ in $D$ that maps $Fc_2$ to $Gc_2$
    How can I detect any relation between $F,G$ meaning they are similar? This
    naturality condition is $$\alpha_{c_2} \circ F f = G f \circ \alpha_{c_1},
    \forall c_1,c_2$$

*** Natural transformation maps morphisms to ...

    A natural transformation maps a morphism to a commuting diagram (*naturality
    square*).

*** Natural isomorphims

    All the components of a NT are invertible

*** Category of functors and natural transformation
    - If I compose the components of two natural transformations $\alpha: F a
      \rightarrow G a$ and $\beta: G a \rightarrow H a$, do I have another
      natural transformation? yes
    - Is there an identity NT? yes, it is the family of identity morphisms $F a \rightarrow F a$
    - The category of functors from $C$ into $D$ is called $D^C$
    - In 'Cat', the morphisms between categories (functors) are not only a set but a category

*** Cells 
    - 0-cell is an object
    - 1-cell is a morphism
    - 2-cell is a morphism between morphisms
*** 2-category 
    - A category where we have morphisms  between *morphisms* (2-cells)
    - 2-cells can be composed horizontally (mapping between 1-cell compositions) or vertically
      (over the same pair of objects) 
    - 'Cat' is a 2-category where the morphisms between categories (functors)
      are not only a set but a category
    - 2-Category equivalence of morphisms is defined up to isomorphisms (it is lax)
    
*** Representable functors  
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
a \arrow[rr, "d^{(-)}", dashed] \arrow[rrr, "F(-)", dashed, bend left] &  & d^a \in \textbf{Set} \arrow[d] \arrow[r] & \cong d^a \arrow[d] \\
b \arrow[u] \arrow[rr, dashed] \arrow[rrr, dashed, bend right] &  & d^b \in \textbf{Set} \arrow[r] & \cong d^b
\end{tikzcd}
#+END_EXPORT
    - Given an object $d \in C$, we have a functor $d^{(-)}: C^{op} \rightarrow Set$ 

    - Given a generic contravariant functor $F: C^{op} \rightarrow Set$, we say that it is
      *representable* by $d$ if it is isomorphic to $d^{(-)}$.

*** Universal property 
A universal property of object $X$ is a description of either $X^{(-)}$ or
$(-)^X$ functors or any other functor isomorphic to them. We say that $X$
*represents the functor*, while the functor encodes the *universal property* of $X$.

*** Universal property of initiality

If there exists an object $X$ for which $(-)^X$ is isomorphic to the functor 

$$\textrm{sing} : (-) \mapsto \{ \cdot \}$$ 

that maps objects to the singleton set, then we say that $X$ is initial.

*** Universal property of finality 

If there exists an object $X$ for which $X^{(-)}$ is isomorphic to the functor 

$$\textrm{sing} : (-) \mapsto \{ \cdot \}$$ 

that maps objects to the singleton set, then we say that $X$ is final.
This means that, the set of morphisms into $X$ from any other object is singleton.

*** Universal property encoded by $1_{Set}: Set \rightarrow Set$
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
x \arrow[d, "f"] \arrow[r, "1_{Set}"] & x \arrow[d, "f"] \arrow[r, "\cong"] & x^? \arrow[l] \arrow[d, "f_*"] \\
y \arrow[r, "1_{Set}"] & y \arrow[r] & y^? \arrow[l, "\cong"]
\end{tikzcd}
#+END_EXPORT

The singleton set is the only value for (?) that represents $1_{Set}$ because
only for that object there is a natural transformation that makes the right
square commute.

*** Universal property encoded by the forgetful functor $U: Grp \rightarrow Set$
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
G \arrow[d, "f"] \arrow[r, "U"] & S_G \arrow[d, "f_U"] \arrow[r, "\cong"] & G^? \arrow[l] \arrow[d, "f_*"] \\
H \arrow[r, "U"] & S_H \arrow[r] & H^? \arrow[l, "\cong"]
\end{tikzcd}
#+END_EXPORT

The only value for $?$ is the group $Z$. i.e., the *free group on a single
generator*. So $Z$ represents $U$. In fact, the set $G^Z$ is the set of
homomorphisms from $Z$ to $G$ whose size depends on which of the elements of $G$
we map the generator.


** Functor algebras 
*** Definition of algebras and co-algebras
    - An algebraic operation in domain $X$ is a morphism from tuple objects to $X$
      e.g.: $$ X \times A
      \rightarrow X$$ or $$ A \rightarrow X $$

    - A co-algebraic operation in domain $X$ is a morphism from $X$ into a tuple
      object, possibly containing $X$: $$ X \rightarrow A \times
      X $$

*** Functoriality of products, coproducts, exponential and powersets

    - The product operation in a category $C$ is a bi-functor $(-) \times (-): C
      \times C \rightarrow C$ (it maps both *pairs of objects* to a *product object*
      and *pairs of functions* to a *product function*).

    - Fixed an object $A$ there is a functor $(-)^A: C \rightarrow C$ that maps $X$
      into $X^A$ (the exponential object).

    - The identity map is (endo-)functorial as well as the endomap that maps $X$
      into a fixed object.

*** How to build morphisms of polynomial functors with respect to original morphism

    - If we can build functors for products and coproducts, we can build functors
      also for their combination;

    - For example: $T(X) = X + (C \times X)$
      maps X to an object $X + (C \times X)$ but also morphisms $f: X \rightarrow X'$:

      $$T(f) = f + (id_C \times f): X+(C\times X) \rightarrow X'+(C \times X')$$

*** Functors mapping to 1 and 0

    - $X \rightarrow 1$ is the functor that maps $X$ into the singleton set (final object)

    - $X \rightarrow 0$ is the functor that maps $X$ into the emtpy set (initial object)

*** Relevant (natural) identities between polynomial functors

    - There are isomorphisms that make some functors equivalent, e.g. $X \times
      Y = Y \times X$ or $(X \times (Y + Z)) = (X \times Y) + (X \times Z)$.

    - They follow the same rules of addition and multiplication of numbers
*** Functor algebra

    Given a polynomial (endo-)functor $T$ that maps $X \in C$ to $T(X) \in
    C$, a functor algebra for $T$ is a pair $(U,a)$:

    - an object $U \in C$ (*carrier*)
    - a morphism $a: T(U) \rightarrow U$ (*algebra structure*)

    $a$ must be defined by a cotuple of several functions whose signature is
    specified by $T$. For example, $$T(X) = 1 + X + (X \times X)$$ defines $$e:
    1 \rightarrow U, i: X \rightarrow X, m: (X \times X) \rightarrow X$$ which
    might encode the signature of group operations.

*** Functor algebra example - natural numbers

    $0$ and $S$ maps over natural numbers can be seen as a functor algebra
    $([0,S],\mathbb{N})$ of the functor $T(X) = 1 + X$.

*** Homomorphisms of algebras

    Given two T-functor algebras $(U, a: T(-) \rightarrow -)$ and $(V, b: T(-) \rightarrow -)$,
    a homomorphism of algebras from $(U,a)$ to $(V,b)$ is a function $f: U \rightarrow V$ which commutes
    with the operations $$ f \circ a = b \circ T(f)$$

*** Whole point of (co-)algebras
    - define functions indirectly exploiting fixed (co-)algebraic constructors
      and finality/initiality
    - so one has to specify only the initial algebra $A$ and another algebra $B$
      and automatically the morphism can be built. In general, the morphisms
      used by $B$ are not recursive.

*** Initial algebras
    - Fixed a functor $T$, functor algebras $(U, a: T(U) \rightarrow U)$ can be
      seen as categorical objects with algebra homomorphisms as morphism.

    - In this category, an *initial algebra* is an algebra for which there exist
      one and only one morphism from it to all the other algebras.

*** Lambek's lemma
    if $a: T(U) \rightarrow U$ is an initial algebra then there is an
    inverse $a^{-1}: U \rightarrow T(U)$ such that $T(U) \simeq U$.

*** An initial algebra defines homomorphisms by induction (integers)

    - Let's indicate with $(N, [0,S]: 1 + N \rightarrow N$) the *initial* algebra of
      natural numbers.

    - An object $Q$ equipped with a functor algebra $$(Q, [q_0,q_S]:
      1+Q\rightarrow Q)$$ defines, by induction, one and only one algebra
      morphism $f: N \rightarrow Q$.

      - $f \circ 0 = q_0$
      - $f \circ S = q_S \circ f$

      i.e, $$f = n \mapsto q_S^n(q_0)$$

*** An initial algebra defines homomorphisms by induction (lists)

    * Let's indicate with $(A^*, [e,c]: 1 + A \times A^* \rightarrow A^*$) the
      *initial* algebra of lists of $A$.

    * An algebra $$(Q^*, [q_e,q_c]:
      1+A \times Q^* \rightarrow Q^*)$$ defines, by induction, one and only one algebra
      morphism $f: A^* \rightarrow Q^*$.

      - $f \circ e = q_e$
      - $f \circ c = q_c \circ (id \times f)$

    * For example, an algebra $$(\mathbb{N}, [0, S \circ \pi]: 1+A \times
      \mathbb{N} \rightarrow \mathbb{N})$$ defines implicitly the length of a list

*** Proofs by induction with initial algebras

    - A predicate $P$ can be seen as a subset of $N$ by an inclusion morphism $i$. 

    - Induction assumptions ($0 \in P$ and $n \in P \Rightarrow (n+1) \in P$)
      allow to check that the square commutes and that $i$ is actually an
      algebra morphism (note, only for these assumptions the diagram commutes with $i$).

    - Since there is only algebra morphism from $N$ to $N$ (id) this means that
      $i$ must be an epi-morphism, as its pre-composition with the unique
      initial morphism should give $id$ (we say that it is a retraction).

*** Principle of list induction for a predicate on the set of lists
    To show that a predicate/set $P$ is equal to the set of all lists $A*$, it is enough to
    show the following:

    - $empty \in P$
    - $\forall a, \alpha \in P \Rightarrow cons(a,\alpha) \in P$

    i.e., 
    - $P$ can be understood as an algebra $$(P, [empty,cons]: 1 + A\times P \rightarrow P)$$ 
    - $P$ is a subalgebra of $A^*$ because there is a morphism $i: P \rightarrow A^*$
    - Since $A^*$ is initial, any morphism $A^* \rightarrow A^*$ is the identity
      (by uniqueness), so $i$ is epi and mono (iso).
*** Fixed point functors
    - Initial algebras for some functors are already known. If we start from a
      generic functor $t$, the type of an initial algebra $I$ should be such
      that $I \cong t(I)$ (Lambeck).
    - Assuming $I \sim F~t$ we have $F~t = t~(F~t)$, which can be created
      through a recursive data type ~Fix t = Fx t (Fix t)~. Fx encodes algebraic
      operations $t(I) \rightarrow t$.
*** Catamorphisms 
    - Given an initial algebra $(I, Fx: t~I \rightarrow I)$ and a generic algebra $(E, k)$, a
      generic morphism $g: I \rightarrow E$ can be defined as $g = k \circ (t~g) \circ unfix$
    - We say that $g = cata(k)$
    - Given the same expression in $I$, I can create mappings into several other
      types by simply specifying the non-recursive $k$.

*** Catamorphisms fusion law 
    - Given an initial algebra $(I, Fx: t~I \rightarrow I)$ and a generic algebra $(E, k)$ and a
      function $g: E \rightarrow H$ we have that $$g \circ cata(k) = cata (k \circ g)$$
    - If $E$ is a list and $H$ is a number type, this means I can fuse two loops into one.
      
*** Hylomoprhisms
   - Given a initial and final algebra $A$, I can create a morphism $g: B
     \rightarrow C$ from a coalgebra $B$ and an algebra $C$ by $$g = cata(c) \circ ana(b)$$

*** Paramorphisms 

    - Assume an initial algebra $I$, I can build a morphism to $Z$ from an
      algebra $(I \times Z, f)$ with $$\pi_Z \circ cata(f) \cong cata (f \circ
      \pi_Z)$$ 

    - We call $$para(\cdot) = cata (\cdot \circ \pi_Z)$$
      
*** Parsers with recursion schemes interpreters
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:
- Assume $L[]$ is a functor that extends $N[]$ and $\widetilde{L}$ is its
  initial algebra.

- We can define a combinator parser for $\widetilde{L}$ (blue) by exploiting
  $N[]$'s constructor and two additional functions (red).

- Here we show the case for $n_2[\widetilde{L}]:
  \widetilde{L}\times\widetilde{L} \rightarrow N \widetilde{L}$

#+BEGIN_EXPORT latex
\begin{tikzcd}
L[\widetilde{L}] \arrow[d,"\phi",red] \arrow[r] & (P \circ L)[\widetilde{L}] \arrow[d,"P \phi"]  & (P \circ N)[\widetilde{L}] \arrow[l,"\gamma",red] \arrow[ld, "P\phi \circ \gamma"] \\
\widetilde{L} \arrow[r]   & P [\widetilde{L}] & P [\widetilde{L}] \times P [\widetilde{L}] \arrow[u, "Pn_2"] \arrow[l, "P\phi\circ\gamma \circ P n_2", blue]
\end{tikzcd}
#+END_EXPORT
** Functor co-algebras
*** Co-algebra
    Given a polynomial (endo-)functor $T$ that maps $X \in C$ to $T(X) \in
    C$, a functor co-algebra for $T$ is a pair $(U, c)$

    - an object $U \in C$ (*carrier*)
    - a morphism $c: U \rightarrow T(U)$ (*co-algebra structure*)

    $c$ must be defined by a tuple of several functions whose signature is
    specified by $T$. For example, $$T(X) = A \times X$$ defines $$(value,next):
    (U \rightarrow A, U \rightarrow U)$$ for any process $U$.
*** Homomorphisms of co-algebras

    Given two T-functor co-algebras $(U, a: - \rightarrow T(-))$ and $(V, b: - \rightarrow T(-))$,
    a homomorphism of algebras from $(U,a)$ to $(V,b)$ is a function $f: U \rightarrow V$ which commutes
    with the operations $$ T(f) \circ a = b \circ f$$
*** Final co-algebra
    - A final coalgebra $d: W \rightarrow T(W)$ is a coalgebra such that for
      every coalgebra $c: U \rightarrow T(U)$ there exists a unique map of
      co-algebras $f: (U,c) \rightarrow (W,d)$

    - Note: we have *initial algebras* and *final* *co-algebras*
    - Example: the final algebra of $T(X) = A \times X$ is $(A^\mathbb{N}, <h,
      t>)$ where $A^\mathbb{N}$ is the set of infinite sequences over $A$, while
      $h,t$ are the *head* and *tail* functions.

*** Examples of final co-algebras
    
    | Functor            | FC Carrier                        | FC Structure         | Notes                 |
    |--------------------+-----------------------------------+----------------------+-----------------------|
    | $A \times X$       | $A^\mathbb{N}$                    | head($a$), tail($a$) | Infinite lists of As  |
    | $1 + (A \times X)$ | $A^{\infty} = A^* + A^\mathbb{N}$ | possnext($a$)        | Finite and inf. lists |
    | $1 + X$            | $\mathbb{N} \cup \{ \infty \}$    | pred($n$)            |                       |
    
*** Bisimulation 
    - Any relation $R \subseteq Z \times Z$ that is a final co-algebra over $Z$
      implies, by uniqueness of finality, that the pairs that belong to it are
      of equal elements; $R$ is called a bi-simulation.
    - If $Z=A^N$, having a bi-simulation means providing a relation $R \subseteq
      A^N \times A^N$ for which this holds: $$R(a,b) \Rightarrow h(a) = h(b)
      \wedge R(t(a), t(b))$$ we could say then that $a=b$.
*** Anamorphisms
   - Given a final co-algebra A, and a generic co-algebra $(B,f)$ the unfold of
     $f$ allows to create a mapping $B \rightarrow A$ non-recursively; this is called $ana(f)$.

** Natural transformations
*** Natural transformations and parametric polymorphism
    - In PP, I must use a single expression for a parametric function
    - A lot of parametric polymorphic functions ~F a -> G a~ are natural
      transformations by default (theorems for free) and can be used to optimize
      code, e.g.: $$safeTail \circ fmap~f = fmap~f \circ safeTail$$
    - Note, typeclasses represent /ad-hoc/ polymorphism.
    - The return of a monad is a natural transformation
** Adjunctions 
*** Adjoint functors 
:PROPERTIES:
:BEAMER_opt: fragile
:END:
:LOGBOOK:
CLOCK: [2018-07-26 Thu 11:19]--[2018-07-26 Thu 11:24] =>  0:05
:END:
#+BEGIN_EXPORT latex
\begin{tikzcd}
C~\textrm{with}~\epsilon: LR \rightarrow I_c \arrow[rr, "R(\textrm{ight})~\textrm{free}", bend right=49] & \bot & D~\textrm{with}~\eta: I_d \rightarrow R L \arrow[ll, "L(\textrm{eft}) ~ \textrm{frgtfl}", bend right=49]
\end{tikzcd}
#+END_EXPORT
    - Two categories $C$ and $D$ are equivalent if I can build two functors, one
      going left $L: C \leftarrow D$ and $R: C \rightarrow D$ if their
      composition is naturally isomorphic through $\eta$ and $\epsilon$ 
    - We say that $L$ is /left adjoint/ to R
*** Adjoint functors and homsets
    - It is another way of stating that two functors $L: C \leftarrow D$ and $R:
      C \rightarrow D$ are adjoint by comparing homsets $$C(L d, c) \cong D(d, R
      c)$$ for all $c,d$.
    - If this happens, then $$D(d,RLd)\cong C(Ld, Ld)$$ but $D(d, RLd)$ is our
      family of mappings/natural transformation $\eta$, if it exists. And it
      does, because $C(Ld,Ld)$ is not empty.
** Limits theory
*** Diagram functors
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

- In any category $C$, I can pick objects by expressing a *pattern*, i.e., through
  another (small) *index* or *shape* category $J$ and any functor $D: J \rightarrow C$ (diagram
  functor). 



*** Cone
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  &  & c \arrow[ld, "\lambda_{c,A}"] \arrow[d, "\lambda_{c,B}"] \arrow[rd, "\lambda_{c,C}"] &  \\
A \arrow[r] \arrow[rrrr, dotted, bend right] \arrow[rrrrru, "\Delta_c" description, dashed] & B \arrow[rrrr, "D"', dotted, bend right] \arrow[rrrru, dashed] & C \arrow[l] \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i \arrow[r] & j & k \arrow[l]
\end{tikzcd}
#+END_EXPORT

- A cone over a diagram $D$ is built over natural transformations $\lambda$
  between the constant functor $\Delta_c$ and $D$ (both from the index category
  $S$).

- Consider each family $\lambda_{c,-}$ of morphisms with apex $c$, we define
  $Cone(c,D)$ as the set $\{ \lambda_{c,-} \}$ (as there can be more than one).


*** Limit cone 
    :PROPERTIES:
    :BEAMER_opt: fragile
    :END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
c \arrow[rr, "{Cone(c,D)}"] &  & \{\lambda_{c,-}\} \in Set \arrow[d] \\
c' \arrow[u, "m"] \arrow[rr, "{Cone(c',D)}"] &  & \{\lambda_{c',-}\} \in Set 
\end{tikzcd}
#+END_EXPORT

- $Cone(-,D): C^{op} \rightarrow Set$ is a functor and any morphism $m$ between
  apices is a morphism between cones. If there exists an object $d \in C$ for
  which $Cone(-,D) \cong d^{(-)}$, we say that $d$ is the limit of $D$.

*** Products as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d, "!\exists"] &  \\
 &  &  &  & lim~D \arrow[ld] \arrow[rd] &  \\
1 \arrow[rrr, "D"', dotted, bend right] \arrow[rrrru, dashed] & 2 \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i &  & j
\end{tikzcd}
#+END_EXPORT

A product object $d$ is the limit of a diagram $D$ built over an index
category $S$ of only two objects (and no morphisms).

*** Terminal object as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
c'' \arrow[rd] & c \arrow[d] & c' \arrow[ld] \\
 & lim~D & 
\end{tikzcd}
#+END_EXPORT
    
A terminal object is the limit of apices of cones built over an empty index category.

*** Equalizer as limit 
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d, "!\exists"] &  \\
 &  &  &  & lim~D \arrow[ld] \arrow[rd] &  \\
1 \arrow[rrr, "D"', dotted, bend right] \arrow[rrrru, dashed] \arrow[r, bend left] \arrow[r, bend right] & 2 \arrow[rrrr, dotted, bend right] \arrow[rrru, dashed] &  & i \arrow[rr, bend left] \arrow[rr, bend right] &  & j
\end{tikzcd}
#+END_EXPORT 

An equalizer is the limit of a diagram with two points (1 and 2) and two arrows
from 1 to 2.

*** Pullback (fibered product)
:PROPERTIES:
:BEAMER_opt: fragile
:END:

#+BEGIN_EXPORT latex
\begin{tikzcd}
 &  &  &  & c \arrow[d] &  \\
 & \textrm{Index Cat} &  &  & lim~D \arrow[ld, "p"] \arrow[d, "r"] \arrow[rd, "q"] &  \\
1 \arrow[r] & 2 & 3 \arrow[l] & A \arrow[r, "f"'] & B & C \arrow[l, "g"]
\end{tikzcd}
#+END_EXPORT

- The limit cones should be equal so $$ f \circ p = g \circ q $$ In Set, $lim~D$
  would be a product where $g$ on second element equals to $f$ on first
  element.

- If one uses fibers in $A$ and $B$ to make $f,g$ injective then
  $lim~D$ would be the product of fibers.

*** Fiber 
 - A *fiber* of a function $f$ and a value $b$ is the set of elements for which
   $f(x) = b$.

 - It is a way to make some arbitrary function as injective.
